export default [
    {
        "title": "Home",
        "fileName": "index.html",
        "text": "Home Apex Kit This readme covers things at a very high level. You can find more information about individual pieces, including design philosophy and code documentation in the wiki. What is Apex Kit? I'm a woodworker by hobby. One of the unique things about woodworking, is we often spend a lot of time making Jigs. Jigs are ... job helpers, designed to make a tricky cut repeatable and safe. Making a tapered table leg? There's a jig for that. Need to drill the same hole in the same spot in 12 pieces of wood? There's a jig for that. Apex kit is a series of 'jigs' to make Salesforce software development faster, safer and more repeatable. As such, nothing in this repository is truly necessary. You can write triggers without this(or any) trigger framework. You can harness Queueables, make queries and callouts etc. all without Apex kit. That said, Apex kit exists to keep us all from re-inventing the wheel. Can you use triggers without it's trigger framework? Yes, but this will save you time, and effort. Or at least that's the value prop. That said, Apex Kit consists of a number of 'libraries' that can be used independently of one another, though they're designed to work together. Specifically Apex Kit contains: Feature Flags: A library for gating features and functionality for specific users. Supports gating based on org wide on/off, permission sets and custom permissions. Log: a bullet proof logging solution thats guaranteed to log, even when a transaction fails, or an exception occurs. OrgShape: a class for inspecting the current runtime environment, and the features / functionality the org has enabled. This includes a number of polyfill methods to determine or synthesize information about your org. Ouroboros -(Needs a better name): This is a library for developing Queueable jobs that self-re-enqueue until a given condition is met. In other words, this helps you build classes of work that can process massive quantities of data, one chunk at a time. Polyfills: Polyfills contains methods Salesforce should have provided, but doesn't. Look here before implementing a method you thought  already existed only to find out Salesforce doesn't provide it. Promises: This library helps you write chainable bits of discrete asynchronous work that are executed in order. Effectively, it provides developers Javascript Promises, but in Apex. Super powerful, and flexible, especially for long-chains of API calls. Query Lib: A library for making SOQL and SOSL queries via a builder-style API / DSL. While not necessary, QueryLib queries enforce CRUD/FLS security. this library is tightly coupled to Safely(see below), for now Quiddity:(I didn't name this one. That's on Salesforce) A library for inspecting the runtime execution context of the current transaction. Additionally provides gating functionality allowing developers using it to prevent code paths in select execution contexts. i.e.: don't run this code in a user-driven context. Rest Library: This library provides a consistent abstraction for making REST callouts. Either on a one-off basis, or at on a complete API integration level.(see wiki for examples). Safely: Safely has two parts - first, a user permission checking library called 'canTheUser' which helps developers determine crud and fls at runtime. The second part, 'Safely', wraps DML calls in Apex Security Decision objects - stripping fields and objects the user doesn't have access to. This library makes it super simple to safely make DML calls. Test Utilities: Contains a test data factory, a HTTP Callout Mock factory, and a Stubbing library that enables developers to define a stub/mock declaratively, there in their test. Deprecates so much boilerplate. Trigger Framework: is, well, a trigger framework. This one is controlled entirely through custom metadata and has built in support for per-user bypass. helpful for mass data imports ULID: This is a library for generating Universally Unique Lexicographically Sortable Identifiers. These are similar in concept to UUID's but are sortable, because the first 10 digits are a Crockford encoded timestamp. Design Philosophy Apex Kit strives to stick to the following design principes. Be as simple as possible. But no simpler. - Which is to say, you may not find that ApexKit does everything you want, but you are probably unlikely to think Apex Kit's solutions are 'too heavy'. Be as easy to use as possible. To that end, way to much thought has been put into method and class names. The goal is to build as close to an english-sentence like API. At times this isn't exactly possible. For instance, Safely's API for DML Insert sadly can't simply be called insert  because insert  is a reserved word. So Safely's method name for insert is doInsert . Be as declarative as possible. - Apex Kit makes heavy use of the Builder pattern, or Fluent interface.This makes use of these libraries very expressive and declarative. Where possible, be configurable outside of code. Thus, much of what Apex Kit brings to the table over other libraries is the use of Custom Metadata Type records for configuration. (Working on this one) Consistent api for extensions. Why Apex Kit? There's a ton of really good open source Apex libraries. Stalwarts of the community like NovaLog or FFLib. There's nothing wrong with these and I didn't create Apex Kit because they're bad/wrong/deficient. Much of Apex Kit started out life as parts of my work for Apex Recipes when I worked as a Salesforce Developer Advocate(I got better). Apex Recipes is designed to be \"teaching code\". Ie: code that may not be the most useful, in production, but helps teach developers to use the platform and the Apex language. Apex Kit is the production ready version of that teaching code; plus some extras. I recognize there's plenty of ways to solve just about any problem, and I'm not so arrogant to believe Apex Kit's the best, or only way to solve these problems. I do, however, have enough of an ego to think Apex Kit is a good set  of solutions."
    },
    {
        "title": "EnqueueNextQueueableProcessStep",
        "fileName": "EnqueueNextQueueableProcessStep.html",
        "text": "EnqueueNextQueueableProcessStep This class implements the Apex Transaction Finalizer interface. It's used to implement promises. This class is constructed with a list of QueueableProcess Objects, and any passthrough data. The first promise in the list is executed. The QueueableProcess class automatically attaches this finalizer to it's execution. Signature public class EnqueueNextQueueableProcessStep implements System.Finalizer EnqueueNextQueueableProcessStep Properties Name Signature Description dataPassthrough private final Object dataPassthrough This field allows you to pass information into your initial QueueableProcessStep. This is also the field that is passed to the next QueueableProcessStep in the list. processSteps private final List<QueueableProcess> processSteps A list of QueueableProcess Objects. The first step in the list is executed. EnqueueNextQueueableProcessStep Constructors EnqueueNextQueueableProcessStep(processSteps, dataPassthrough) Constructor for the EnqueueNextQueueableProcessStep class. EnqueueNextQueueableProcessStep(processSteps, dataPassthrough) Constructor for the EnqueueNextQueueableProcessStep class. Signature public EnqueueNextQueueableProcessStep(\t\tList<QueueableProcess> processSteps,\t\tObject dataPassthrough\t) Parameters processSteps Type: \t\tList<QueueableProcess> List<QueueableProcess> A list of QueueableProcess Objects. The first step in the list is executed. dataPassthrough Object this is either the initial data passed into the first QueueableProcessStep, or the data passed from the previous QueueableProcessStep. EnqueueNextQueueableProcessStep Methods execute(context) This method is required by the Apex Transaction Finalizer interface. It's used to enqueue the next QueueableProcessStep in the list, if one exists. execute(context) This method is required by the Apex Transaction Finalizer interface. It's used to enqueue the next QueueableProcessStep in the list, if one exists. Signature public void execute(FinalizerContext context) Parameters context Type: FinalizerContext FinalizerContext Dependency injected by Salesforce at execution time. Contains the result of the QueueableProcessStep that just executed."
    },
    {
        "title": "QueueableProcess",
        "fileName": "QueueableProcess.html",
        "text": "QueueableProcess This class provides a way for developers to create a process of Queueable classes. This implementation facilitates the handoff of data into the overarching process and from one process step to the next. While functionally similar to the way a 'Promise' pattern allows you chain async methods together. However, a true Promise pattern resolves itself, one way or another, within the same transaction. Therefore, this is not a true Promise pattern, but an elegant way to logically chain Salesforce Queueables together. As a Developer, you'll need to extend this class, implementing the necessary execute  method. Your execute  method will be invoked asynchronously as part of a Queueable. You can then chain additional Queueables together using the then  method provided by this class. As each 'step' of the chain is completed the transaction finalizer will be constructed with the remaining steps and any passthrough data you specify. Passthrough data allows you to pass data between steps. Signature public abstract class QueueableProcess implements Queueable, Database.AllowsCallouts QueueableProcess Properties Name Signature dataPassthrough public Object dataPassthrough processSteps public List<QueueableProcess> processSteps QueueableProcess Methods execute() This must be implemented by extending classes. Developers - implement this method with the work you want executed asynchronously. execute(context) This is required by the Queueable interface. It's the essence of how the QueueableProcess pattern is implemented in Apex. then(toAdd) This method provides a syntatic sugar for adding a new QueueableProcess to the chain. execute() This must be implemented by extending classes. Developers - implement this method with the work you want executed asynchronously. Signature abstract public void execute() execute(context) This is required by the Queueable interface. It's the essence of how the QueueableProcess pattern is implemented in Apex. Signature public virtual void execute(QueueableContext context) Parameters context Type: QueueableContext QueueableContext - dependency injected by Salesforce at execution time. then(toAdd) This method provides a syntatic sugar for adding a new QueueableProcess to the chain. Signature protected QueueableProcess then(Object toAdd) Parameters toAdd Type: Object An instance of a class that extends this QueueableProcess class and implements the execute  method. Returns Returns a Queueable Process instance that can be used to chain additional QueueableProcess instances."
    },
    {
        "title": "ULID",
        "fileName": "ULID.html",
        "text": "ULID This class implements the ULID spec in Apex. You can find that standard here: https://github.com/ulid/spec ULID === Universally Unique Lexicographically Sortable Identifier Think of them as a UUIDv4, but sortable. Similar to UUIDv7. These are, effectively a universally unique identifier but one that is *sortable*. This class is a port of the Javascript ULID reference implementation. Signature public with sharing class ULID ULID Properties Name Signature Description CHARACTERSET private static final List<String> CHARACTERSET This character set is the complete list of allowed characters in a ULID string. It intentionally does not include characters that may be ambiguously read, such as i, l, o, and u characters. CHARACTERSETSIZE private static final Long CHARACTERSETSIZE MAXTIME private static final Long MAXTIME RANDOMLENGTH private static final Integer RANDOMLENGTH TIMELENGTH private static final Long TIMELENGTH ULID Methods encodeTimestamp(dtSeed, timeLength) Encodes a given timestamp into characters from the acceptable character set above. fetchRandomCharacterFromCharacterSet() pulls a random character from the character set. generate() Generates a ULID string according to spec. https://github.com/ulid/spec generateRandomString(length) generates a random string from the character set of a given length. encodeTimestamp(dtSeed, timeLength) Encodes a given timestamp into characters from the acceptable character set above. Signature private static String encodeTimestamp(Long dtSeed, Long timeLength) Parameters dtSeed Type: Long long form of Timestamp to encode timeLength Type: Long how many characters of the timestamp to encode Returns String fetchRandomCharacterFromCharacterSet() pulls a random character from the character set. Signature private static String fetchRandomCharacterFromCharacterSet() Returns String generate() Generates a ULID string according to spec. https://github.com/ulid/spec Signature public static String generate() Returns String generateRandomString(length) generates a random string from the character set of a given length. Signature private static String generateRandomString(Integer length) Parameters length Type: Integer Returns String"
    },
    {
        "title": "ULIDTests",
        "fileName": "ULIDTests.html",
        "text": "ULIDTests Signature class ULIDTests ULIDTests Methods testGenerateMethod() testGenerateMethod() Signature @isTest private static void testGenerateMethod()"
    },
    {
        "title": "FF",
        "fileName": "FF.html",
        "text": "FF Convenience class for checking feature flags Signature public with sharing class FF FF Methods isEnabled(featureName) isNotEnabled(featureName) value(featureName) Law of diminishing returns here. This isn't tested, per-say. It's underlying FeatureFlag implementation *is* tested, however. isEnabled(featureName) Signature public static Boolean isEnabled(String featureName) isNotEnabled(featureName) Signature public static Boolean isNotEnabled(String featureName) value(featureName) Law of diminishing returns here. This isn't tested, per-say. It's underlying FeatureFlag implementation *is* tested, however. Signature public static String value(string featureName)"
    },
    {
        "title": "FeatureFlag",
        "fileName": "FeatureFlag.html",
        "text": "FeatureFlag Provides a unified, simple and testable api for feature flags Signature public with sharing class FeatureFlag FeatureFlag Properties Name Signature Annotations Description dataProvider private FeatureFlagDataProvider dataProvider @TestVisible This property enables optional(testing) injection of a data provider. Because this library relies on custom metadata that has to be deployed, I needed to provide a way to inject a data provider. FF_NOT_ENABLED private static final String FF_NOT_ENABLED @TestVisible The API of this library enables an enabled feature to have an optional String value. However, if the feature is not defined in metadata, the value will be null. This ... could be less than deterministic, so this will *always* return a string. When undefined by metadata, the value returned is defined here. FeatureFlag Constructors FeatureFlag() Default constructor. defaults to setting the dataProvider to a new instance of the FeatureFlagDataProvider FeatureFlag(dataProvider) Private constructor. Accepts a previously constructed Feature Flag Data Provider object. Used only during testing. FeatureFlag() Default constructor. defaults to setting the dataProvider to a new instance of the FeatureFlagDataProvider Signature public FeatureFlag() FeatureFlag(dataProvider) Private constructor. Accepts a previously constructed Feature Flag Data Provider object. Used only during testing. Signature @TestVisible private FeatureFlag(FeatureFlagDataProvider dataProvider) Parameters dataProvider Type: FeatureFlagDataProvider FeatureFlagDataProvider a previously constructed FFDataProvider object FeatureFlag Methods dataProvider.enablingCustomPermissions() isEnabled(featureFlagName) Returns true if the specified feature flag is enabled This is the main method of the FeatureFlag library. It checks three methods of feature enablement: 1. Global metadata enablement on the Feature_Flag__mdt  record 2. Enablement through a permission set that is shared between the running user and the feature flag's related list of Feature_Flag_Enabled_For__mdt  records 3. Enablement through a list of custom permissions defined by FF_Enabled_For_Custom_Permission__mdt  records. isEnabledByCustomPermissionForUser(featureFlagName) Logic gate for determining if a feature flag is enabled for this user based on a custom permission isEnabledForUser(featureFlagName) Logical test for per-user enablement of a feature isEnabledOnOrAfterToday(featureFlagName) isNotEnabled(featureFlag) Convenience method for determining if a feature flag is not enabled isUniversallyEnabled(featureFlagName) Logical test for global enablement of a feature value(featureFlagName) Returns the value of the specified feature flag This method is deterministic. It will *always* return a non-null String In situations where the requested feature flag is not enabled, this method returns the value specified above as FF_NOT_ENABLED dataProvider.enablingCustomPermissions() Signature String customPermissionName : dataProvider.enablingCustomPermissions(\t\t\t\tfeatureFlagName\t\t\t) isEnabled(featureFlagName) Returns true if the specified feature flag is enabled This is the main method of the FeatureFlag library. It checks three methods of feature enablement: 1. Global metadata enablement on the Feature_Flag__mdt  record 2. Enablement through a permission set that is shared between the running user and the feature flag's related list of Feature_Flag_Enabled_For__mdt  records 3. Enablement through a list of custom permissions defined by FF_Enabled_For_Custom_Permission__mdt  records. Signature public Boolean isEnabled(String featureFlagName) Parameters featureFlagName Type: String String name of the feature flag Returns Boolean isEnabledByCustomPermissionForUser(featureFlagName) Logic gate for determining if a feature flag is enabled for this user based on a custom permission Signature @TestVisible private Boolean isEnabledByCustomPermissionForUser(String featureFlagName) Parameters featureFlagName Type: String String name of the feature flag Returns Boolean isEnabledForUser(featureFlagName) Logical test for per-user enablement of a feature Signature @TestVisible private Boolean isEnabledForUser(String featureFlagName) Parameters featureFlagName Type: String String name of the feature flag Returns Boolean isEnabledOnOrAfterToday(featureFlagName) Signature @TestVisible private Boolean isEnabledOnOrAfterToday(String featureFlagName) isNotEnabled(featureFlag) Convenience method for determining if a feature flag is not enabled Signature public Boolean isNotEnabled(String featureFlag) Parameters featureFlag Type: String String name of flag to check Returns Boolean isUniversallyEnabled(featureFlagName) Logical test for global enablement of a feature Signature @TestVisible private Boolean isUniversallyEnabled(String featureFlagName) Parameters featureFlagName Type: String String name of the feature flag Returns Boolean value(featureFlagName) Returns the value of the specified feature flag This method is deterministic. It will *always* return a non-null String In situations where the requested feature flag is not enabled, this method returns the value specified above as FF_NOT_ENABLED Signature public String value(String featureFlagName) Parameters featureFlagName Type: String String name of the feature flag Returns String"
    },
    {
        "title": "FeatureFlagDataProvider",
        "fileName": "FeatureFlagDataProvider.html",
        "text": "FeatureFlagDataProvider Signature public with sharing class FeatureFlagDataProvider FeatureFlagDataProvider Properties Name Signature Annotations Description featureFlags public Map<String, Feature_Flag__mdt> featureFlags Fetch the feature flags from custom metadata. featureFlagsById private Map<String, Feature_Flag__mdt> featureFlagsById Returns a map of known feature flag metadata records keyed by the record id, rather than the record's label. mFeatureFlagsById private Map<String, Feature_Flag__mdt> mFeatureFlagsById mPerCustomPermissionOverridesByFeatureFlag private Map<String, List<FF_Enabled_For_Custom_Permission__mdt>> mPerCustomPermissionOverridesByFeatureFlag @testVisible mPerPermSetOverridesByFeatureFlag private Map<String, List<Feature_Flag_Enabled_For__mdt>> mPerPermSetOverridesByFeatureFlag @testVisible perCustomPermissionOverrides public Map<String, FF_Enabled_For_Custom_Permission__mdt> perCustomPermissionOverrides perCustomPermissionOverridesByFeatureFlag public Map<String, List<FF_Enabled_For_Custom_Permission__mdt>> perCustomPermissionOverridesByFeatureFlag Used to correlate related metadata records for per-custom permission enablement of features without having to burn a soql query to do so. perPermSetOverrides private Map<String, Feature_Flag_Enabled_For__mdt> perPermSetOverrides perPermSetOverridesByFeatureFlag public Map<String, List<Feature_Flag_enabled_for__mdt>> perPermSetOverridesByFeatureFlag Used to correlate related metadata records for per-permission set enablement of features without having to burn a soql query to do so. FeatureFlagDataProvider Constructors FeatureFlagDataProvider() Default constructor. Pulls the custom metadata records without soql. FeatureFlagDataProvider() Default constructor. Pulls the custom metadata records without soql. Signature public FeatureFlagDataProvider() FeatureFlagDataProvider Methods enablingCustomPermissions(featureFlagName) Returns set of Strings representing custom permission names that provide feature enablement for the indicated feature flag enablingPermissionSets(featureFlagName) Returns set of ids corresponding to permission set ids that provide feature enablement for the indicated feature flag fetchUsersAssignedPermissionSets() Used to find a users' assigned permission set ids. This is intentionally tied to the *executing users' userId*. overrideFlags(flags) Allows testers to inject custom metadata records that are not present in the org overridePerCustomPermissionOverrides(perCustomPermissionOverrides) Allows testers to inject custom metadata records that are not present in the org overridePerPermSetOverrides(perPermSetOverrides) Allows testers to inject custom metadata records that are not present in the org rekeyMapByFeatureFlagName(incomingMap, memoizedMap, correlatingMap, keyField) given an incoming map, create and return a new map where the keys are a from the correlation map and the values are the values of the incoming map. Uses a memoized map for building and is intended to be used with a memoization pattern. enablingCustomPermissions(featureFlagName) Returns set of Strings representing custom permission names that provide feature enablement for the indicated feature flag Signature public Set<String> enablingCustomPermissions(String featureFlagName) Parameters featureFlagName Type: String Name of the feature flag to calculate custom permission names Returns Set<String>  of custom permission names enablingPermissionSets(featureFlagName) Returns set of ids corresponding to permission set ids that provide feature enablement for the indicated feature flag Signature public Set<String> enablingPermissionSets(String featureFlagName) Parameters featureFlagName Type: String Name of the feature flag to calculate Perm Set Ids Returns Set<Id>  of permission set ids fetchUsersAssignedPermissionSets() Used to find a users' assigned permission set ids. This is intentionally tied to the *executing users' userId*. Signature public List<String> fetchUsersAssignedPermissionSets() Returns List<Id> overrideFlags(flags) Allows testers to inject custom metadata records that are not present in the org Signature @testVisible private void overrideFlags(Map<String, Feature_flag__mdt> flags) Parameters flags Type: Map<String, Feature_flag__mdt> Map of flags to override this class' loading of custom metadata for flags overridePerCustomPermissionOverrides(perCustomPermissionOverrides) Allows testers to inject custom metadata records that are not present in the org Signature private void overridePerCustomPermissionOverrides(\t\tMap<String, FF_Enabled_For_Custom_Permission__mdt> perCustomPermissionOverrides\t) Parameters perCustomPermissionOverrides Type: \t\tMap<String, FF_Enabled_For_Custom_Permission__mdt> Map of flags to override this class' loading of custom metadata for per-custom-permission enablement of features overridePerPermSetOverrides(perPermSetOverrides) Allows testers to inject custom metadata records that are not present in the org Signature private void overridePerPermSetOverrides(\t\tMap<String, Feature_Flag_Enabled_For__mdt> perPermSetOverrides\t) Parameters perPermSetOverrides Type: \t\tMap<String, Feature_Flag_Enabled_For__mdt> Map of flags to override this class' loading of custom metadata for per-permission set enablement of features rekeyMapByFeatureFlagName(incomingMap, memoizedMap, correlatingMap, keyField) given an incoming map, create and return a new map where the keys are a from the correlation map and the values are the values of the incoming map. Uses a memoized map for building and is intended to be used with a memoization pattern. Signature private Map<String, List<sObject>> rekeyMapByFeatureFlagName(\t\tMap<String, sObject> incomingMap,\t\tMap<String, List<sObject>> memoizedMap,\t\tMap<String, Feature_Flag__mdt> correlatingMap,\t\tString keyField\t) Parameters incomingMap Type: \t\tMap<String, sObject> This is the map that will provide the values to the resulting map. memoizedMap Type: List<sObject>> This is the 'working' or memoized map that is iteratively built and ultimately returned. correlatingMap Type: Feature_Flag__mdt> This map provides the keys for the returned map keyField       This is the field used to correlate the incoming map with the corresponding correlation map Returns Map<String, List<sObject>>"
    },
    {
        "title": "FeatureFlagCommonTests",
        "fileName": "FeatureFlagCommonTests.html",
        "text": "FeatureFlagCommonTests Class serves to DRY code for various testing methods that require it. It is not intended to be used directly. Signature @isTest public class FeatureFlagCommonTests FeatureFlagCommonTests Properties Name Signature exampleFeatureFlagId static id exampleFeatureFlagId FeatureFlagCommonTests Methods getExistingPermSetId() getOverriddenPerPermSet(flagName, permSetId, enabled) getTestFlag(flagName, enabled) getExistingPermSetId() Signature public static Id getExistingPermSetId() getOverriddenPerPermSet(flagName, permSetId, enabled) Signature public static Map<String, Feature_Flag_Enabled_For__mdt> getOverriddenPerPermSet(\t\tString flagName,\t\tId permSetId,\t\tBoolean enabled\t) getTestFlag(flagName, enabled) Signature public static Map<String, Feature_Flag__mdt> getTestFlag(\t\tString flagName,\t\tBoolean enabled\t)"
    },
    {
        "title": "FeatureFlagDataProviderTests",
        "fileName": "FeatureFlagDataProviderTests.html",
        "text": "FeatureFlagDataProviderTests Signature @isTest class FeatureFlagDataProviderTests FeatureFlagDataProviderTests Methods testEnablingPermissionSetsPositive() testReturnEmptySetWhenNoPermSetOverridesFound() testEnablingPermissionSetsPositive() Signature @isTest private static void testEnablingPermissionSetsPositive() testReturnEmptySetWhenNoPermSetOverridesFound() Signature @isTest private static void testReturnEmptySetWhenNoPermSetOverridesFound()"
    },
    {
        "title": "FeatureFlagTests",
        "fileName": "FeatureFlagTests.html",
        "text": "FeatureFlagTests Signature @isTest class FeatureFlagTests FeatureFlagTests Methods testDefaultConstructorPositive() testFeatureFlagEnabledForPermSetFoundReturnsTrue() testFeatureFlagFoundIsNotEnabledReturnsTrue() testFeatureFlagFoundReturnsTrue() testFeatureFlagFoundWrapperIsNotEnabledReturnsTrue() testFeatureFlagNotFoundReturnsFalse() testFeatureFoundEnabledViaCustomPermissionPositive() testFetchUsersAssignedPermissionSetsPositive() testFlagFoundAndEnabledReturnsValue() testFlagFoundButDisabledReturnsFixedString() testFlagNotFoundReturnsFixedString() testDefaultConstructorPositive() Signature @isTest private static void testDefaultConstructorPositive() testFeatureFlagEnabledForPermSetFoundReturnsTrue() Signature @isTest private static void testFeatureFlagEnabledForPermSetFoundReturnsTrue() testFeatureFlagFoundIsNotEnabledReturnsTrue() Signature @isTest private static void testFeatureFlagFoundIsNotEnabledReturnsTrue() testFeatureFlagFoundReturnsTrue() Signature @isTest private static void testFeatureFlagFoundReturnsTrue() testFeatureFlagFoundWrapperIsNotEnabledReturnsTrue() Signature @isTest private static void testFeatureFlagFoundWrapperIsNotEnabledReturnsTrue() testFeatureFlagNotFoundReturnsFalse() Signature @isTest private static void testFeatureFlagNotFoundReturnsFalse() testFeatureFoundEnabledViaCustomPermissionPositive() Signature @isTest private static void testFeatureFoundEnabledViaCustomPermissionPositive() testFetchUsersAssignedPermissionSetsPositive() Signature @isTest private static void testFetchUsersAssignedPermissionSetsPositive() testFlagFoundAndEnabledReturnsValue() Signature @isTest private static void testFlagFoundAndEnabledReturnsValue() testFlagFoundButDisabledReturnsFixedString() Signature @isTest private static void testFlagFoundButDisabledReturnsFixedString() testFlagNotFoundReturnsFixedString() Signature @isTest private static void testFlagNotFoundReturnsFixedString()"
    },
    {
        "title": "Log",
        "fileName": "Log.html",
        "text": "Log Generic logging framework that persists across DML reversions by publishing a Platform Event Signature public with sharing class Log See LogMessage , LogException , LogTriggerHandler Log Properties Name Signature Description currentInstance private static Log currentInstance private instance of this log class that backs the singleton get() method. publishToStandardLogs public static Boolean publishToStandardLogs Log Constructors Log() private list of LogMessage objects to be published in the future Log() private list of LogMessage objects to be published in the future Signature private Log() Log Methods add(messageToLog) Add a message to the buffer without publishing it. Assumes a null severity add(messageToLog, severity) Add a message to the buffer without publishing it. add(exceptionToLog) Add an formatted exception message to the buffer without publishing it. Assumes a null Severity add(exceptionToLog, severity) Add an formatted exception message to the buffer without publishing it. alsoPublishToStandardLogs(logEvents) get() Singleton pattern get  method. publish() Publish any messages currently in the buffer, without adding any new ones. publish(exceptionToLog) Auto-format exception details, add it to the log buffer, and then publish the current buffer. Use the equivalent add method if you intend to add multiple messages rapidly to minimize DML usage. publish(messageToLog) Auto-format a custom log message string, add it to the log buffer, and then publish the current buffer. Use the equivalent add method if you intend to add multiple messages rapidly to minimize DML usage. publish(severity, messageToLog) add(messageToLog) Add a message to the buffer without publishing it. Assumes a null severity Signature public void add(String messageToLog) Parameters messageToLog Type: String The string message to add to the buffer. add(messageToLog, severity) Add a message to the buffer without publishing it. Signature public void add(String messageToLog, LoggingLevel severity) Parameters messageToLog Type: String The string message to add to the buffer. severity Type: LoggingLevel LogSeverity enum add(exceptionToLog) Add an formatted exception message to the buffer without publishing it. Assumes a null Severity Signature public void add(Exception exceptionToLog) Parameters exceptionToLog Type: Exception Exception to format and log add(exceptionToLog, severity) Add an formatted exception message to the buffer without publishing it. Signature public void add(Exception exceptionToLog, LoggingLevel severity) Parameters exceptionToLog Type: Exception Exception to format and log severity Type: LoggingLevel LogSeverity enum alsoPublishToStandardLogs(logEvents) Signature private static void alsoPublishToStandardLogs(List<Log__e> logEvents) get() Singleton pattern get  method. Signature public static Log get() Returns Log publish() Publish any messages currently in the buffer, without adding any new ones. Signature public void publish() publish(exceptionToLog) Auto-format exception details, add it to the log buffer, and then publish the current buffer. Use the equivalent add method if you intend to add multiple messages rapidly to minimize DML usage. Signature public void publish(Exception exceptionToLog) Parameters exceptionToLog Type: Exception exception to format and log publish(messageToLog) Auto-format a custom log message string, add it to the log buffer, and then publish the current buffer. Use the equivalent add method if you intend to add multiple messages rapidly to minimize DML usage. Signature public void publish(String messageToLog) Parameters messageToLog Type: String String to log publish(severity, messageToLog) Signature public void publish(LoggingLevel severity, String messageToLog)"
    },
    {
        "title": "LogException",
        "fileName": "LogException.html",
        "text": "LogException This is a custom exception class for logging purposes. I create a custom exception for every feature of ApexKit. While this exception isn't yet used, it's here as a nod to consistency. Signature public class LogException extends Exception"
    },
    {
        "title": "LogMessage",
        "fileName": "LogMessage.html",
        "text": "LogMessage A class for automatically attaching metadata to log messages like Quiddity and RequestID Signature public with sharing class LogMessage See Log , LogException , LogTriggerHandler LogMessage Properties Name Signature Description EXCEPTION_STRING_FORMAT private static final String EXCEPTION_STRING_FORMAT message public String message Public message property. quiddity public Quiddity quiddity Public read only property for quiddity. Privately set. requestId public String requestId public read only property for the request ID. Privately set. set private set set private set severity public LoggingLevel severity Public severity property. LogMessage Constructors LogMessage(severity, message) Constructor accepting a message to log. Severity is auto set to info LogMessage(message) Constructor accepting a message to log. Severity is auto set to info LogMessage(ex) Constructor accepting an exception object. LogMessage(severity, message) Constructor accepting a message to log. Severity is auto set to info Signature public LogMessage(LoggingLevel severity, String message) Parameters severity Type: LoggingLevel LoggingLevel the severity of the message message Type: String String the string to log LogMessage(message) Constructor accepting a message to log. Severity is auto set to info Signature public LogMessage(String message) Parameters message Type: String String the string to log LogMessage(ex) Constructor accepting an exception object. Signature public LogMessage(Exception ex) Parameters ex Type: Exception any exception object LogMessage Methods toEvent() converts this object to an event for publishing toEvent() converts this object to an event for publishing Signature public Log__e toEvent() Returns SObject"
    },
    {
        "title": "LogTriggerHandler",
        "fileName": "LogTriggerHandler.html",
        "text": "LogTriggerHandler Class handles the post-insert processing of Log events Extends the TriggerFramework class Enables the user to define if this handler should silently ignore errors thrown by dml, or if it should throw a log exception Signature public with sharing class LogTriggerHandler extends TriggerFramework LogTriggerHandler Properties Name Signature logs private List<Log__e> logs shouldThrow private Boolean shouldThrow LogTriggerHandler Constructors LogTriggerHandler(logs, shouldThrow) Constructor, called by trigger. LogTriggerHandler(logs) convenience constructor, calls previous constructor but will not throw a log exception on dml errors LogTriggerHandler(logs, shouldThrow) Constructor, called by trigger. Signature public LogTriggerHandler(List<Log__e> logs, Boolean shouldThrow) Parameters logs Type: List<Log__e> Logs to process shouldThrow Type: Boolean if true, this class will throw a log exception when DML errors occur. LogTriggerHandler(logs) convenience constructor, calls previous constructor but will not throw a log exception on dml errors Signature public LogTriggerHandler(List<Log__e> logs) Parameters logs Type: List<Log__e> logs to process LogTriggerHandler Methods afterInsert() Overridden from TriggerFramework. TriggerFramework executes this method when the trigger context is after insert @throws LogException on Database.insert failure isSuccess is false afterInsert() Overridden from TriggerFramework. TriggerFramework executes this method when the trigger context is after insert @throws LogException on Database.insert failure isSuccess is false Signature public override void afterInsert()"
    },
    {
        "title": "LogTests",
        "fileName": "LogTests.html",
        "text": "LogTests Signature @IsTest private class LogTests LogTests Methods testDirectPublishMethodsPositive() testLogMultipleItemPositive() testDirectPublishMethodsPositive() Signature @IsTest private static void testDirectPublishMethodsPositive() testLogMultipleItemPositive() Signature @IsTest private static void testLogMultipleItemPositive()"
    },
    {
        "title": "CachePartitionType",
        "fileName": "CachePartitionType.html",
        "text": "CachePartitionType Enum for partition type. Signature public enum CachePartitionType Values SESSION ORG"
    },
    {
        "title": "OrgShape",
        "fileName": "OrgShape.html",
        "text": "OrgShape Class contains static methods for determining if specific platform features are enabled. For example, do we have platform cache enabled. You could also write similar methods for experiences. Shared Code Signature public with sharing class OrgShape OrgShape Properties Name Signature Annotations Description DEFAULTPARTITION private static final String DEFAULTPARTITION Defines the default cache partition for use in this class. getFiscalYearStartMonth public Integer getFiscalYearStartMonth returns this org's fiscal year starting month hasNamespacePrefix public Boolean hasNamespacePrefix reports whether this transaction took place in an org with a namespace prefix id public Id id reports the org's ID. in practice, this is a constant instanceName public String instanceName returns the instance name. In practice not null. isReadOnly public Boolean isReadOnly reports the read-only status. this is a proxy for 'is this org active' isSandbox public Boolean isSandbox property reports whether this transaction took place in a sandbox. lightningEnabled public Boolean lightningEnabled reports the users' displayed theme. locale public String locale reports the org's locale multiCurrencyEnabled public Boolean multiCurrencyEnabled reports whether or not this transaction took place in an org with multiCurrency enabled. Note: I have no idea why the underlying method is on UserInfo. name public String name reports the org's name namespacePrefix public String namespacePrefix reports the namespace prefix of this org. May return null; orgShape private Organization orgShape @TestVisible orgType public String orgType reports this org's type. ie: 'Developer Edition' podName public String podName convenience method. Alias for instanceName safeDefaultCachePartition private Cache.OrgPartition safeDefaultCachePartition @TestVisible set private set timeZoneKey public String timeZoneKey reports the timeZoneSidKey OrgShape Methods getAvailableOrgCachePartition() This method is responsible for discovering a cache partition that can be used for determining if platformCache is enabled and configured. Note: This method memoizes the result of the query, ensuring that the underlying soql query is only ever run once per transaction. getDefaultPartition(type) returns a Cache.Partition for a given name, and type getOrgRecord() Private method for pulling the Organization record Note: We're suppressing PMD warning on Crud Checking because we want everyone to be able to pull this read-only record. getOrgShape() Private method that memoizes the query result Suppressing the PMD warning to validate crud permissions before DML, because the Organization Object is always available. isAdvancedMultiCurrencyManagementEnabled() Uses a dynamic soql query to determine if Advanced MultiCurrency Management is enabled. Note, this must be a dynamic soql query because referencing DatedConversionRate will not compile in orgs without Advanced MultiCurrency Management enabled. Note: This was originally written by the NPSP team and can be found here: https://github.com/SalesforceFoundation/NPSP/blob/aad20ffb747ecda9a037c4bce9cd19617b6a727b/src/classes/UTIL_Currency.cls#L79 isPlatformCacheEnabled() Method determines if platform cache is enabled for this org Note: fail-safes to false. Note: Allows override by setting OrgShape.disablePlatformCache equal to true. Use this in test contexts where cache is not available like when you have to use seeAllData=true isSeeAllDataTrue() Certain features of the platform are incompatible with data-siloed tests. These features require testing with the annotation @test(seeAllData=true). Other platform features are incompatible with seeAllData=true. When used in a test context, this method determines if the currently running test is executing with, or without seeAllData=true. This method is therefore used to automatically disable platform features that require are incompatible with seeAllData=true. For example: platform cache is incompatible with seeAllData=true. However, our security library, CanTheUser utilizes platform cache to accelerate Crud and FLS checks. CanTheUser uses this method, in part, to determine, transparently if it should utilize platformCache during test execution Note: It is not a good idea, and against best practices to use seeAllData=true when not absolutely necessary. getAvailableOrgCachePartition() This method is responsible for discovering a cache partition that can be used for determining if platformCache is enabled and configured. Note: This method memoizes the result of the query, ensuring that the underlying soql query is only ever run once per transaction. Signature @SuppressWarnings('PMD.ApexCRUDViolation') private Cache.OrgPartition getAvailableOrgCachePartition() Returns String getDefaultPartition(type) returns a Cache.Partition for a given name, and type Signature public Cache.Partition getDefaultPartition(CachePartitionType type) Parameters type Type: CachePartitionType Enum of .SESSION or .ORG Returns Cache.Partition getOrgRecord() Private method for pulling the Organization record Note: We're suppressing PMD warning on Crud Checking because we want everyone to be able to pull this read-only record. Signature private Organization getOrgRecord() getOrgShape() Private method that memoizes the query result Suppressing the PMD warning to validate crud permissions before DML, because the Organization Object is always available. Signature @TestVisible private Organization getOrgShape() Returns Organization isAdvancedMultiCurrencyManagementEnabled() Uses a dynamic soql query to determine if Advanced MultiCurrency Management is enabled. Note, this must be a dynamic soql query because referencing DatedConversionRate will not compile in orgs without Advanced MultiCurrency Management enabled. Note: This was originally written by the NPSP team and can be found here: https://github.com/SalesforceFoundation/NPSP/blob/aad20ffb747ecda9a037c4bce9cd19617b6a727b/src/classes/UTIL_Currency.cls#L79 Signature public Boolean isAdvancedMultiCurrencyManagementEnabled() Returns Boolean isPlatformCacheEnabled() Method determines if platform cache is enabled for this org Note: fail-safes to false. Note: Allows override by setting OrgShape.disablePlatformCache equal to true. Use this in test contexts where cache is not available like when you have to use seeAllData=true Signature public Boolean isPlatformCacheEnabled() Returns Boolean isSeeAllDataTrue() Certain features of the platform are incompatible with data-siloed tests. These features require testing with the annotation @test(seeAllData=true). Other platform features are incompatible with seeAllData=true. When used in a test context, this method determines if the currently running test is executing with, or without seeAllData=true. This method is therefore used to automatically disable platform features that require are incompatible with seeAllData=true. For example: platform cache is incompatible with seeAllData=true. However, our security library, CanTheUser utilizes platform cache to accelerate Crud and FLS checks. CanTheUser uses this method, in part, to determine, transparently if it should utilize platformCache during test execution Note: It is not a good idea, and against best practices to use seeAllData=true when not absolutely necessary. Signature public Boolean isSeeAllDataTrue() Returns Boolean OrgShape.CachedOrgShape Signature public with sharing class CachedOrgShape implements Cache.CacheBuilder OrgShape.CachedOrgShape Methods doLoad(requiredButNotUsed) Note: We're suppressing PMD warning on Crud Checking because we want everyone to be able to pull this read-only record. doLoad(requiredButNotUsed) Note: We're suppressing PMD warning on Crud Checking because we want everyone to be able to pull this read-only record. Signature public Organization doLoad(String requiredButNotUsed)"
    },
    {
        "title": "OrgShapeTests",
        "fileName": "OrgShapeTests.html",
        "text": "OrgShapeTests Signature @isTest class OrgShapeTests OrgShapeTests Properties Name Signature orgCheck private static Organization orgCheck orgShape private static OrgShape orgShape OrgShapeTests Methods testAdvancedMultiCurrencyManagement() testCacheIsUsedPositive() testGetSafeDefaultCachePartitionMemoized() testOrgShapeProperties() testPlatformCacheDisabledWhenSeeAllDataTrue() testPlatformCachePositive() testSeeAllDataFalseWhenDisabled() testSeeAllDataPositiveWhenEnabled() testAdvancedMultiCurrencyManagement() Signature @isTest private static void testAdvancedMultiCurrencyManagement() testCacheIsUsedPositive() Signature @isTest private static void testCacheIsUsedPositive() testGetSafeDefaultCachePartitionMemoized() Signature @isTest private static void testGetSafeDefaultCachePartitionMemoized() testOrgShapeProperties() Signature @isTest private static void testOrgShapeProperties() testPlatformCacheDisabledWhenSeeAllDataTrue() Signature @SuppressWarnings('PMD.ApexUnitTestShouldNotUseSeeAllDataTrue') private static void testPlatformCacheDisabledWhenSeeAllDataTrue() testPlatformCachePositive() Signature @isTest private static void testPlatformCachePositive() testSeeAllDataFalseWhenDisabled() Signature @isTest private static void testSeeAllDataFalseWhenDisabled() testSeeAllDataPositiveWhenEnabled() Signature @SuppressWarnings('PMD.ApexUnitTestShouldNotUseSeeAllDataTrue') private static void testSeeAllDataPositiveWhenEnabled()"
    },
    {
        "title": "Ouroboros",
        "fileName": "Ouroboros.html",
        "text": "Ouroboros Signature public with sharing abstract class Ouroboros implements Queueable, Database.AllowsCallouts Ouroboros Properties Name Signature passthrough public Object passthrough Ouroboros Methods className() execute() execute(context) hasExitCriteriaBeenMet() className() Signature public String className() execute() Signature abstract public void execute() execute(context) Signature public virtual void execute(QueueableContext context) hasExitCriteriaBeenMet() Signature abstract public boolean hasExitCriteriaBeenMet()"
    },
    {
        "title": "OuroborosFinalizer",
        "fileName": "OuroborosFinalizer.html",
        "text": "OuroborosFinalizer Signature public with sharing class OuroborosFinalizer implements Finalizer OuroborosFinalizer Properties Name Signature logger private Log logger ouroboros private Ouroboros ouroboros OuroborosFinalizer Constructors OuroborosFinalizer(ouroboros) OuroborosFinalizer(ouroboros) Signature public OuroborosFinalizer(Ouroboros ouroboros) OuroborosFinalizer Methods execute(context) safeToEnqueueAccordingToLimits() execute(context) Signature public void execute(FinalizerContext context) safeToEnqueueAccordingToLimits() Signature private boolean safeToEnqueueAccordingToLimits()"
    },
    {
        "title": "OuroborosTests",
        "fileName": "OuroborosTests.html",
        "text": "OuroborosTests Signature @isTest class OuroborosTests OuroborosTests Properties Name Signature codeDidTryToReEnqueue private Boolean codeDidTryToReEnqueue OuroborosTests Methods testClassName() testOuroborosFunctionalNegative() testClassName() Signature @isTest private static void testClassName() testOuroborosFunctionalNegative() Signature @isTest private static void testOuroborosFunctionalNegative() OuroborosTests.ExampleOuroborosImplementation Signature public class ExampleOuroborosImplementation extends Ouroboros OuroborosTests.ExampleOuroborosImplementation Methods execute() hasExitCriteriaBeenMet() execute() Signature public override void execute() hasExitCriteriaBeenMet() Signature public override Boolean hasExitCriteriaBeenMet()"
    },
    {
        "title": "Polyfills",
        "fileName": "Polyfills.html",
        "text": "Polyfills Signature public with sharing class Polyfills Polyfills Methods classNameFromInstance(obj) Used to determine what the Class name of the passed in Object is. There are many mostly accurate ways of doing this, but this is the only one that works in all cases. concatenateBlobAndString(someFile, supplementalText) generateStackTrace() generateUUID() getSObjectTypeFromList(sObjects) getStringifiedBlob(someFile) idMapFromCollectionByKey(key, incomingList) mapFromCollectionWithCollectionValues(key, incomingList) pluckFieldFromList(fieldName, incomingList) setContainsAnyItemFromList(setToCheck, listOfPossibleOptions) Well, as much as I'd like to make this a generic method, I can't Apex doesn't provide a way to dynamically cast a list of one type to another type. So, this is a method that will only work for Ids Future versions of this class might include methods of the same name but with different parameters to handle other types This makes me sad. stringMapFromCollectionByKey(key, incomingList) typeObjectFromClassName(className) typeObjFromInstance(obj) classNameFromInstance(obj) Used to determine what the Class name of the passed in Object is. There are many mostly accurate ways of doing this, but this is the only one that works in all cases. Signature public static String classNameFromInstance(Object obj) concatenateBlobAndString(someFile, supplementalText) Signature public static Blob concatenateBlobAndString(\t\tBlob someFile,\t\tString supplementalText\t) generateStackTrace() Signature public static String generateStackTrace() generateUUID() Signature public static String generateUUID() getSObjectTypeFromList(sObjects) Signature public static String getSObjectTypeFromList(List<SObject> sObjects) getStringifiedBlob(someFile) Signature public static String getStringifiedBlob(Blob someFile) idMapFromCollectionByKey(key, incomingList) Signature public static Map<Id, SObject> idMapFromCollectionByKey(\t\tString key,\t\tList<SObject> incomingList\t) mapFromCollectionWithCollectionValues(key, incomingList) Signature public static Map<Id, List<SObject>> mapFromCollectionWithCollectionValues(\t\tString key,\t\tList<SObject> incomingList\t) pluckFieldFromList(fieldName, incomingList) Signature public static List<String> pluckFieldFromList(\t\tString fieldName,\t\tList<SObject> incomingList\t) setContainsAnyItemFromList(setToCheck, listOfPossibleOptions) Well, as much as I'd like to make this a generic method, I can't Apex doesn't provide a way to dynamically cast a list of one type to another type. So, this is a method that will only work for Ids Future versions of this class might include methods of the same name but with different parameters to handle other types This makes me sad. Signature public static Boolean setContainsAnyItemFromList(\t\tSet<String> setToCheck,\t\tList<String> listOfPossibleOptions\t) stringMapFromCollectionByKey(key, incomingList) Signature public static Map<String, SObject> stringMapFromCollectionByKey(\t\tString key,\t\tList<SObject> incomingList\t) typeObjectFromClassName(className) Signature public static Type typeObjectFromClassName(String className) typeObjFromInstance(obj) Signature public static Type typeObjFromInstance(Object obj) Polyfills.GuaranteedNotToExist Class exists to reserve an object type that cannot be instantiated.  It is used for generating stack traces on demand, and other reflection operations. Signature private class GuaranteedNotToExist Polyfills.GuaranteedNotToExistException Exception used internally to throw exceptions that are intentional and used for unofficial reflection operations. Signature private class GuaranteedNotToExistException extends Exception"
    },
    {
        "title": "PolyfillsTests",
        "fileName": "PolyfillsTests.html",
        "text": "PolyfillsTests Signature @isTest private class PolyfillsTests PolyfillsTests Methods givenAStringAndABlob_CanConcatenateIntoOneBlob() testClassNameFromInstance() testDemonstrateIdMapFromCollectionByKeyPositiveWithList() testDemonstrateStringMapFromCollectionByKeyPositiveWithList() testGenerateStacktracePositive() testGenerateUUID() testGetSObjectTypeFromListPositiveNoType() testMapFromCollectionWithListOfValuesPostive() testPluckFieldFromList() testSetContainsAnyItemFromListPositive() testSetDoesNOTContainsAnyItemFromListPositive() testTypeObjectFromClassNamePositive() testTypeObjFromInstance() givenAStringAndABlob_CanConcatenateIntoOneBlob() Signature @isTest private static void givenAStringAndABlob_CanConcatenateIntoOneBlob() testClassNameFromInstance() Signature @isTest private static void testClassNameFromInstance() testDemonstrateIdMapFromCollectionByKeyPositiveWithList() Signature @isTest private static void testDemonstrateIdMapFromCollectionByKeyPositiveWithList() testDemonstrateStringMapFromCollectionByKeyPositiveWithList() Signature @isTest private static void testDemonstrateStringMapFromCollectionByKeyPositiveWithList() testGenerateStacktracePositive() Signature @isTest private static void testGenerateStacktracePositive() testGenerateUUID() Signature @isTest private static void testGenerateUUID() testGetSObjectTypeFromListPositiveNoType() Signature @isTest private static void testGetSObjectTypeFromListPositiveNoType() testMapFromCollectionWithListOfValuesPostive() Signature @isTest private static void testMapFromCollectionWithListOfValuesPostive() testPluckFieldFromList() Signature @isTest private static void testPluckFieldFromList() testSetContainsAnyItemFromListPositive() Signature @isTest private static void testSetContainsAnyItemFromListPositive() testSetDoesNOTContainsAnyItemFromListPositive() Signature @isTest private static void testSetDoesNOTContainsAnyItemFromListPositive() testTypeObjectFromClassNamePositive() Signature @isTest private static void testTypeObjectFromClassNamePositive() testTypeObjFromInstance() Signature @isTest private static void testTypeObjFromInstance()"
    },
    {
        "title": "TestPolyfills",
        "fileName": "TestPolyfills.html",
        "text": "TestPolyfills This class is not a unit test of the polyfills class but a set of polyfills for unit testing. Signature @isTest public with sharing class TestPolyfills TestPolyfills Properties Name Signature circuitBreakerTripped public static Boolean circuitBreakerTripped"
    },
    {
        "title": "FieldSelection",
        "fileName": "FieldSelection.html",
        "text": "FieldSelection Signature public enum FieldSelection Values ALL STANDARD CUSTOM"
    },
    {
        "title": "Query",
        "fileName": "Query.html",
        "text": "Query MIT License Copyright(c) 2020 Rafał Kopaczewski Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files(the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software. THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE. Signature public class Query Enums Name Signature Values LogicalOperator public enum LogicalOperator AND_VALUE, OR_VALUE Scope public enum Scope Delegated, Everything, Mine, MyTeamTerritory, MyTerritory, Queue, Team SearchGroup public enum SearchGroup ALL, EMAIL, NAME, PHONE, SIDEBAR SortDirection public enum SortDirection ASCENDING, DESCENDING SortNullRecords public enum SortNullRecords FIRST, LAST Query Methods convertToStringList(values) convertToStringList(values) convertToStringList(values) convertToStringList(values) convertToStringList(values) convertToStringList(values) toExpressionString() toExpressionString() toString() toString() toString() convertToStringList(values) Signature private List<String> convertToStringList(List<Id> values) convertToStringList(values) Signature private List<String> convertToStringList(List<Integer> values) convertToStringList(values) Signature private List<String> convertToStringList(List<Long> values) convertToStringList(values) Signature private List<String> convertToStringList(List<Decimal> values) convertToStringList(values) Signature private List<String> convertToStringList(List<Double> values) convertToStringList(values) Signature private List<String> convertToStringList(Set<Set<String>> values) toExpressionString() Signature public String toExpressionString() toExpressionString() Signature public String toExpressionString() toString() Signature public override String toString() toString() Signature public override String toString() toString() Signature public override String toString() Query.Condition Signature public class Condition Query.Condition Properties Name Signature Annotations expressions private List<Expression> expressions @TestVisible logicalOperator private LogicalOperator logicalOperator @TestVisible Query.Condition Constructors Condition() Condition(logicalOperator) Condition() Signature public Condition() Condition(logicalOperator) Signature public Condition(LogicalOperator logicalOperator) Query.Condition Methods convertToStringList(values) equals(fieldName, value) excludes(fieldName, value) excludes(fieldName, value) greaterOrEqual(fieldName, value) greaterThan(fieldName, value) includes(fieldName, value) includes(fieldName, value) isIn(fieldName, value) isLike(fieldName, value) isNotIn(fieldName, value) lessOrEqual(fieldName, value) lessThan(fieldName, value) negateSubcondition(condition) notEquals(fieldName, value) subcondition(condition) toConditionString() toString() convertToStringList(values) Signature private List<String> convertToStringList(List<Datetime> values) equals(fieldName, value) Signature public Condition equals(String fieldName, Object value) excludes(fieldName, value) Signature public Condition excludes(String fieldName, Set<Set<String>> value) excludes(fieldName, value) Signature public Condition excludes(String fieldName, Set<String> value) greaterOrEqual(fieldName, value) Signature public Condition greaterOrEqual(String fieldName, Object value) greaterThan(fieldName, value) Signature public Condition greaterThan(String fieldName, Object value) includes(fieldName, value) Signature public Condition includes(String fieldName, Set<Set<String>> value) includes(fieldName, value) Signature public Condition includes(String fieldName, Set<String> value) isIn(fieldName, value) Signature public Condition isIn(String fieldName, Object value) isLike(fieldName, value) Signature public Condition isLike(String fieldName, Object value) isNotIn(fieldName, value) Signature public Condition isNotIn(String fieldName, Object value) lessOrEqual(fieldName, value) Signature public Condition lessOrEqual(String fieldName, Object value) lessThan(fieldName, value) Signature public Condition lessThan(String fieldName, Object value) negateSubcondition(condition) Signature public Condition negateSubcondition(Condition condition) notEquals(fieldName, value) Signature public Condition notEquals(String fieldName, Object value) subcondition(condition) Signature public Condition subcondition(Condition condition) toConditionString() Signature public String toConditionString() toString() Signature public override String toString() Query.ConditionDenialExpression Signature @TestVisible private class ConditionDenialExpression implements Expression Query.ConditionDenialExpression Properties Name Signature Annotations condition private Condition condition @TestVisible Query.ConditionDenialExpression Constructors ConditionDenialExpression(condition) ConditionDenialExpression(condition) Signature @TestVisible private ConditionDenialExpression(Condition condition) Query.ConditionExpression Signature @TestVisible private class ConditionExpression implements Expression Query.ConditionExpression Properties Name Signature Annotations condition private Condition condition @TestVisible Query.ConditionExpression Constructors ConditionExpression(condition) ConditionExpression(condition) Signature @TestVisible private ConditionExpression(Condition condition) Query.DateLiteral Signature public class DateLiteral Query.DateLiteral Properties Name Signature Annotations dateLiteralName private String dateLiteralName @TestVisible numberOfUnits private Integer numberOfUnits @TestVisible Query.DateLiteral Constructors DateLiteral(dateLiteralName) DateLiteral(dateLiteralName, numberOfUnits) DateLiteral(dateLiteralName) Signature public DateLiteral(String dateLiteralName) DateLiteral(dateLiteralName, numberOfUnits) Signature public DateLiteral(String dateLiteralName, Integer numberOfUnits) Query.DateLiteral Methods convertToStringList(values) toDateLiteralString() toString() convertToStringList(values) Signature private List<String> convertToStringList(List<Date> values) toDateLiteralString() Signature @TestVisible public String toDateLiteralString() toString() Signature public override String toString() Query.DenialSearchExpression Signature @TestVisible private class DenialSearchExpression implements Expression Query.DenialSearchExpression Properties Name Signature Annotations searchCondition private SearchCondition searchCondition @TestVisible Query.DenialSearchExpression Constructors DenialSearchExpression(searchCondition) DenialSearchExpression(searchCondition) Signature @TestVisible private DenialSearchExpression(SearchCondition searchCondition) Query.DenialSearchExpression Methods toExpressionString() toString() toExpressionString() Signature public String toExpressionString() toString() Signature public override String toString() Query.Expression Signature @TestVisible private interface Expression Query.Expression Methods toExpressionString() toExpressionString() Signature String toExpressionString() Query.FieldExpression Signature @TestVisible private class FieldExpression implements Expression Query.FieldExpression Properties Name Signature Annotations comparisonOperator private String comparisonOperator @TestVisible fieldName private String fieldName @TestVisible value private Object value @TestVisible Query.FieldExpression Constructors FieldExpression(fieldName, comparisonOperator, value) FieldExpression(fieldName, comparisonOperator, value) Signature private FieldExpression(\t\t\tString fieldName,\t\t\tString comparisonOperator,\t\t\tObject value\t\t) Query.PhraseExpression Signature @TestVisible private class PhraseExpression implements Expression Query.PhraseExpression Properties Name Signature Annotations searchPhrase private String searchPhrase @TestVisible Query.PhraseExpression Constructors PhraseExpression(searchPhrase) PhraseExpression(searchPhrase) Signature @TestVisible private PhraseExpression(String searchPhrase) Query.PhraseExpression Methods toExpressionString() toString() toExpressionString() Signature public String toExpressionString() toString() Signature public override String toString() Query.QueryException Signature public class QueryException extends Exception Query.ReturningFieldSpec Signature public class ReturningFieldSpec Query.ReturningFieldSpec Properties Name Signature Annotations fieldsToSelect private Set<String> fieldsToSelect @TestVisible listViewName private String listViewName @TestVisible numberOfRows private Integer numberOfRows @TestVisible objectTypeName private String objectTypeName @TestVisible offset private Integer offset @TestVisible sortOrders private List<SortOrder> sortOrders @TestVisible whereCondition private Condition whereCondition @TestVisible Query.ReturningFieldSpec Constructors ReturningFieldSpec(sobjectType) ReturningFieldSpec(objectTypeName) ReturningFieldSpec(sobjectType) Signature public ReturningFieldSpec(SobjectType sobjectType) ReturningFieldSpec(objectTypeName) Signature public ReturningFieldSpec(String objectTypeName) Query.ReturningFieldSpec Methods addFieldListStatement(queryStatements) addLimitStatement(queryStatements) addOffsetStatement(queryStatements) addOrderByStatement(queryStatements) addUsingListViewStatement(queryStatements) addWhereStatement(queryStatements) offset(offset) orderBy(sortOrder) scopeLimit(numberOfRows) selectField(fieldApiName) selectFields(fieldApiNames) selectFields(fieldApiNames) selectFields(fieldSet) toReturningFieldSpecString() toString() usingListView(listViewName) whereCondition(condition) addFieldListStatement(queryStatements) Signature private void addFieldListStatement(List<String> queryStatements) addLimitStatement(queryStatements) Signature private void addLimitStatement(List<String> queryStatements) addOffsetStatement(queryStatements) Signature private void addOffsetStatement(List<String> queryStatements) addOrderByStatement(queryStatements) Signature private void addOrderByStatement(List<String> queryStatements) addUsingListViewStatement(queryStatements) Signature private void addUsingListViewStatement(List<String> queryStatements) addWhereStatement(queryStatements) Signature private void addWhereStatement(List<String> queryStatements) offset(offset) Signature public ReturningFieldSpec offset(Integer offset) orderBy(sortOrder) Signature public ReturningFieldSpec orderBy(SortOrder sortOrder) scopeLimit(numberOfRows) Signature public ReturningFieldSpec scopeLimit(Integer numberOfRows) selectField(fieldApiName) Signature public ReturningFieldSpec selectField(String fieldApiName) selectFields(fieldApiNames) Signature public ReturningFieldSpec selectFields(List<String> fieldApiNames) selectFields(fieldApiNames) Signature public ReturningFieldSpec selectFields(Set<String> fieldApiNames) selectFields(fieldSet) Signature public ReturningFieldSpec selectFields(Schema.FieldSet fieldSet) toReturningFieldSpecString() Signature public String toReturningFieldSpecString() toString() Signature public override String toString() usingListView(listViewName) Signature public ReturningFieldSpec usingListView(String listViewName) whereCondition(condition) Signature public ReturningFieldSpec whereCondition(Condition condition) Query.ScriptVariable Signature public class ScriptVariable Query.ScriptVariable Properties Name Signature Annotations variableName private String variableName @TestVisible Query.ScriptVariable Constructors ScriptVariable(variableName) ScriptVariable(variableName) Signature public ScriptVariable(String variableName) Query.ScriptVariable Methods formatValue() toScriptVariableString() toString() formatValue() Signature @TestVisible private String formatValue() toScriptVariableString() Signature @TestVisible public String toScriptVariableString() toString() Signature public override String toString() Query.SearchCondition Signature public class SearchCondition Query.SearchCondition Properties Name Signature Annotations logicalOperator private LogicalOperator logicalOperator @TestVisible searchExpressions private List<Expression> searchExpressions @TestVisible Query.SearchCondition Constructors SearchCondition() SearchCondition(logicalOperator) SearchCondition() Signature public SearchCondition() SearchCondition(logicalOperator) Signature public SearchCondition(LogicalOperator logicalOperator) Query.SearchCondition Methods find(searchPhrase) negateSubSearchCondition(searchCondition) subSearchCondition(searchCondition) toConditionString() toString() find(searchPhrase) Signature public SearchCondition find(String searchPhrase) negateSubSearchCondition(searchCondition) Signature public SearchCondition negateSubSearchCondition(\t\t\tSearchCondition searchCondition\t\t) subSearchCondition(searchCondition) Signature public SearchCondition subSearchCondition(\t\t\tSearchCondition searchCondition\t\t) toConditionString() Signature public String toConditionString() toString() Signature public override String toString() Query.SearchExpression Signature @TestVisible private class SearchExpression implements Expression Query.SearchExpression Properties Name Signature Annotations searchCondition private SearchCondition searchCondition @TestVisible Query.SearchExpression Constructors SearchExpression(searchCondition) SearchExpression(searchCondition) Signature @TestVisible private SearchExpression(SearchCondition searchCondition) Query.SearchExpression Methods toExpressionString() toString() toExpressionString() Signature public String toExpressionString() toString() Signature public override String toString() Query.SortOrder Signature public class SortOrder Query.SortOrder Properties Name Signature Annotations direction private SortDirection direction @TestVisible fieldname private String fieldname @TestVisible nullRecords private SortNullRecords nullRecords @TestVisible Query.SortOrder Constructors SortOrder(fieldName) SortOrder(fieldName, direction) SortOrder(fieldName, direction, nullRecords) SortOrder(fieldName) Signature public SortOrder(String fieldName) SortOrder(fieldName, direction) Signature public SortOrder(String fieldName, SortDirection direction) SortOrder(fieldName, direction, nullRecords) Signature public SortOrder(\t\t\tString fieldName,\t\t\tSortDirection direction,\t\t\tSortNullRecords nullRecords\t\t) Query.SortOrder Methods convertToStringList(values) toSortOrderString() toString() convertToStringList(values) Signature private List<String> convertToStringList(List<String> values) toSortOrderString() Signature public String toSortOrderString() toString() Signature public override String toString() Query.TypeOf Signature public class TypeOf Query.TypeOf Properties Name Signature Annotations elseFieldList private Set<String> elseFieldList @TestVisible polymorphicReference private String polymorphicReference @TestVisible sobjectType2FieldList private Map<String, Set<String>> sobjectType2FieldList @TestVisible Query.TypeOf Constructors TypeOf(polymorphicReference) TypeOf(polymorphicReference) Signature public TypeOf(String polymorphicReference) Query.TypeOf Methods elseFieldList(elseFieldList) elseFieldList(elseFieldList) elseFieldList(elseField) toExpressionString() toString() toTypeOfString() whenSObjectType(sobjectType, whenFieldList) whenSObjectType(sobjectType, whenFieldList) elseFieldList(elseFieldList) Signature public TypeOf elseFieldList(Set<String> elseFieldList) elseFieldList(elseFieldList) Signature public TypeOf elseFieldList(List<String> elseFieldList) elseFieldList(elseField) Signature public TypeOf elseFieldList(String elseField) toExpressionString() Signature public String toExpressionString() toString() Signature public override String toString() toTypeOfString() Signature public String toTypeOfString() whenSObjectType(sobjectType, whenFieldList) Signature public TypeOf whenSObjectType(\t\t\tString sobjectType,\t\t\tSet<String> whenFieldList\t\t) whenSObjectType(sobjectType, whenFieldList) Signature public TypeOf whenSObjectType(\t\t\tString sobjectType,\t\t\tList<String> whenFieldList\t\t)"
    },
    {
        "title": "SOQL",
        "fileName": "SOQL.html",
        "text": "SOQL MIT License Copyright(c) 2020 Rafał Kopaczewski Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files(the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software. THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE. Signature public inherited sharing class SOQL SOQL Properties Name Signature Annotations queryString private String queryString @TestVisible SOQL Constructors SOQL(queryString) SOQL(queryString) Signature @TestVisible private SOQL(String queryString) SOQL Methods getQueryLocator() getQueryString() getRecord() getRecords() toString() getQueryLocator() Signature public Database.QueryLocator getQueryLocator() getQueryString() Signature public String getQueryString() getRecord() Signature public sObject getRecord() getRecords() Signature public List<sObject> getRecords() toString() Signature public override String toString() SOQL.Builder Signature public class Builder SOQL.Builder Properties Name Signature Annotations fieldsToSelect private Set<String> fieldsToSelect @TestVisible numberOfRows private Integer numberOfRows @TestVisible objectType private String objectType @TestVisible offset private Integer offset @TestVisible scope private Query.Scope scope @TestVisible sortOrders private List<Query.SortOrder> sortOrders @TestVisible statementFor private Set<String> statementFor @TestVisible statementUpdate private Set<String> statementUpdate @TestVisible typeOfClauses private List<Query.TypeOf> typeOfClauses @TestVisible whereCondition private Query.Condition whereCondition @TestVisible SOQL.Builder Constructors Builder(objectType) Builder(objectType) Signature public Builder(String objectType) SOQL.Builder Methods addForStatement(queryStatements) addFromStatement(queryStatements) addLimitStatement(queryStatements) addOffsetStatement(queryStatements) addOrderByStatement(queryStatements) addScope(scope) addScopeStatement(queryStatements) addSelectStatement(queryStatements) addSubQuery(subQuery) addTypeOf(typeOfClause) addUpdateStatement(queryStatements) addWhereStatement(queryStatements) build() orderBy(sortOrder) selectAll() selectCustom() selectField(fieldApiName) selectFields(fieldApiNames) selectFields(fieldApiNames) selectFields(fieldSet) selectFields(selection) SelectStandard() setForReference() setForUpdate() setForView() setOffset(offset) setScopeLimit(numberOfRows) setUpdateTracking() setUpdateViewStat() toString() whereCondition(condition) addForStatement(queryStatements) Signature private void addForStatement(List<String> queryStatements) addFromStatement(queryStatements) Signature private void addFromStatement(List<String> queryStatements) addLimitStatement(queryStatements) Signature private void addLimitStatement(List<String> queryStatements) addOffsetStatement(queryStatements) Signature private void addOffsetStatement(List<String> queryStatements) addOrderByStatement(queryStatements) Signature private void addOrderByStatement(List<String> queryStatements) addScope(scope) Signature public Builder addScope(Query.Scope scope) addScopeStatement(queryStatements) Signature private void addScopeStatement(List<String> queryStatements) addSelectStatement(queryStatements) Signature private void addSelectStatement(List<String> queryStatements) addSubQuery(subQuery) Signature public Builder addSubQuery(SOQL subQuery) addTypeOf(typeOfClause) Signature public Builder addTypeOf(Query.TypeOf typeOfClause) addUpdateStatement(queryStatements) Signature private void addUpdateStatement(List<String> queryStatements) addWhereStatement(queryStatements) Signature private void addWhereStatement(List<String> queryStatements) build() Signature public SOQL build() orderBy(sortOrder) Signature public Builder orderBy(Query.SortOrder sortOrder) selectAll() Signature public Builder selectAll() selectCustom() Signature public Builder selectCustom() selectField(fieldApiName) Signature public Builder selectField(String fieldApiName) selectFields(fieldApiNames) Signature public Builder selectFields(List<String> fieldApiNames) selectFields(fieldApiNames) Signature public Builder selectFields(Set<String> fieldApiNames) selectFields(fieldSet) Signature public Builder selectFields(Schema.FieldSet fieldSet) selectFields(selection) Signature public Builder selectFields(FieldSelection selection) SelectStandard() Signature public Builder SelectStandard() setForReference() Signature public Builder setForReference() setForUpdate() Signature public Builder setForUpdate() setForView() Signature public Builder setForView() setOffset(offset) Signature public Builder setOffset(Integer offset) setScopeLimit(numberOfRows) Signature public Builder setScopeLimit(Integer numberOfRows) setUpdateTracking() Signature public Builder setUpdateTracking() setUpdateViewStat() Signature public Builder setUpdateViewStat() toString() Signature public override String toString() whereCondition(condition) Signature public Builder whereCondition(Query.Condition condition)"
    },
    {
        "title": "SOQLAgregate",
        "fileName": "SOQLAgregate.html",
        "text": "SOQLAgregate MIT License Copyright(c) 2020 Rafał Kopaczewski Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files(the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software. THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE. Signature public inherited sharing class SOQLAgregate SOQLAgregate Properties Name Signature Annotations queryString private String queryString @TestVisible SOQLAgregate Constructors SOQLAgregate(queryString) SOQLAgregate(queryString) Signature @TestVisible private SOQLAgregate(String queryString) SOQLAgregate Methods getAggregateResults() getQueryString() toString() getAggregateResults() Signature public List<AggregateResult> getAggregateResults() getQueryString() Signature public String getQueryString() toString() Signature public override String toString() SOQLAgregate.Builder Signature public class Builder SOQLAgregate.Builder Properties Name Signature Annotations fieldsToSelect private Set<String> fieldsToSelect @TestVisible groupByCubeOptions private Set<String> groupByCubeOptions @TestVisible groupByOptions private Set<String> groupByOptions @TestVisible groupByRollupOptions private Set<String> groupByRollupOptions @TestVisible havingCondition private Query.Condition havingCondition @TestVisible numberOfRows private Integer numberOfRows @TestVisible objectType private String objectType @TestVisible offset private Integer offset @TestVisible sortOrders private List<Query.SortOrder> sortOrders @TestVisible whereCondition private Query.Condition whereCondition @TestVisible SOQLAgregate.Builder Constructors Builder(objectType) Builder(objectType) Signature public Builder(String objectType) SOQLAgregate.Builder Methods addFromStatement(queryStatements) addGroupByStatement(queryStatements) addHavingStatement(queryStatements) addLimitStatement(queryStatements) addOffsetStatement(queryStatements) addOrderByStatement(queryStatements) addSelectStatement(queryStatements) addWhereStatement(queryStatements) average(fieldName) average(fieldName, alias) build() count(fieldName) count(fieldName, alias) countDistinct(fieldName) countDistinct(fieldName, alias) groupBy(fieldName) groupByCube(fieldName) groupByCube(fieldName, groupingAlias) groupByRollup(fieldName) groupByRollup(fieldName, groupingAlias) havingCondition(condition) maximum(fieldName) maximum(fieldName, alias) minimum(fieldName) minimum(fieldName, alias) offset(offset) orderBy(sortOrder) scopeLimit(numberOfRows) sum(fieldName) sum(fieldName, alias) toString() whereCondition(condition) addFromStatement(queryStatements) Signature private void addFromStatement(List<String> queryStatements) addGroupByStatement(queryStatements) Signature private void addGroupByStatement(List<String> queryStatements) addHavingStatement(queryStatements) Signature private void addHavingStatement(List<String> queryStatements) addLimitStatement(queryStatements) Signature private void addLimitStatement(List<String> queryStatements) addOffsetStatement(queryStatements) Signature private void addOffsetStatement(List<String> queryStatements) addOrderByStatement(queryStatements) Signature private void addOrderByStatement(List<String> queryStatements) addSelectStatement(queryStatements) Signature private void addSelectStatement(List<String> queryStatements) addWhereStatement(queryStatements) Signature private void addWhereStatement(List<String> queryStatements) average(fieldName) Signature public Builder average(String fieldName) average(fieldName, alias) Signature public Builder average(String fieldName, String alias) build() Signature public SOQLAgregate build() count(fieldName) Signature public Builder count(String fieldName) count(fieldName, alias) Signature public Builder count(String fieldName, String alias) countDistinct(fieldName) Signature public Builder countDistinct(String fieldName) countDistinct(fieldName, alias) Signature public Builder countDistinct(String fieldName, String alias) groupBy(fieldName) Signature public Builder groupBy(String fieldName) groupByCube(fieldName) Signature public Builder groupByCube(String fieldName) groupByCube(fieldName, groupingAlias) Signature public Builder groupByCube(String fieldName, String groupingAlias) groupByRollup(fieldName) Signature public Builder groupByRollup(String fieldName) groupByRollup(fieldName, groupingAlias) Signature public Builder groupByRollup(String fieldName, String groupingAlias) havingCondition(condition) Signature public Builder havingCondition(Query.Condition condition) maximum(fieldName) Signature public Builder maximum(String fieldName) maximum(fieldName, alias) Signature public Builder maximum(String fieldName, String alias) minimum(fieldName) Signature public Builder minimum(String fieldName) minimum(fieldName, alias) Signature public Builder minimum(String fieldName, String alias) offset(offset) Signature public Builder offset(Integer offset) orderBy(sortOrder) Signature public Builder orderBy(Query.SortOrder sortOrder) scopeLimit(numberOfRows) Signature public Builder scopeLimit(Integer numberOfRows) sum(fieldName) Signature public Builder sum(String fieldName) sum(fieldName, alias) Signature public Builder sum(String fieldName, String alias) toString() Signature public override String toString() whereCondition(condition) Signature public Builder whereCondition(Query.Condition condition)"
    },
    {
        "title": "SOSL",
        "fileName": "SOSL.html",
        "text": "SOSL MIT License Copyright(c) 2020 Rafał Kopaczewski Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files(the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software. THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE. Signature public inherited sharing class SOSL SOSL Properties Name Signature Annotations queryString private String queryString @TestVisible SOSL Constructors SOSL(queryString) SOSL(') SOSL(queryString) Signature @TestVisible private SOSL(String queryString) SOSL(') Signature return new SOSL(String.join(queryStatements, ' ')) SOSL Methods addDataCategoryStatement(queryStatements) addDivisionStatement(queryStatements) addFindStatement(queryStatements) addHighlightStatement(queryStatements) addLimitStatement(queryStatements) addNetworkStatement(queryStatements) addPricebookIdStatement(queryStatements) addReturningStatement(queryStatements) addSearchGroupStatement(queryStatements) addSnippetStatement(queryStatements) addSpellCorrectionStatement(queryStatements) addUpdateStatement(queryStatements) build() find() getQueryString() query() setScopeLimit(numberOfRows) setUpdateTracking() setUpdateViewStat() toString() toString() withDataCategoryAbove(groupName, category) withDataCategoryAboveOrBelow(groupName, category) withDataCategoryAt(groupName, category) withDataCategoryBelow(groupName, category) withDivision(division) withHighlight() withNetworkId(networkId) withNetworkIds(networkIds) withNetworkIds(networkIds) withPricebookId(pricebookId) withSnippet(snippetTargetLength) withSpellCorrection(isSpellCorrectionEnabled) addDataCategoryStatement(queryStatements) Signature private void addDataCategoryStatement(List<String> queryStatements) addDivisionStatement(queryStatements) Signature private void addDivisionStatement(List<String> queryStatements) addFindStatement(queryStatements) Signature private void addFindStatement(List<String> queryStatements) addHighlightStatement(queryStatements) Signature private void addHighlightStatement(List<String> queryStatements) addLimitStatement(queryStatements) Signature private void addLimitStatement(List<String> queryStatements) addNetworkStatement(queryStatements) Signature private void addNetworkStatement(List<String> queryStatements) addPricebookIdStatement(queryStatements) Signature private void addPricebookIdStatement(List<String> queryStatements) addReturningStatement(queryStatements) Signature private void addReturningStatement(List<String> queryStatements) addSearchGroupStatement(queryStatements) Signature private void addSearchGroupStatement(List<String> queryStatements) addSnippetStatement(queryStatements) Signature private void addSnippetStatement(List<String> queryStatements) addSpellCorrectionStatement(queryStatements) Signature private void addSpellCorrectionStatement(List<String> queryStatements) addUpdateStatement(queryStatements) Signature private void addUpdateStatement(List<String> queryStatements) build() Signature public SOSL build() find() Signature public Search.SearchResults find() getQueryString() Signature public String getQueryString() query() Signature public List<List<SObject>> query() setScopeLimit(numberOfRows) Signature public Builder setScopeLimit(Integer numberOfRows) setUpdateTracking() Signature public Builder setUpdateTracking() setUpdateViewStat() Signature public Builder setUpdateViewStat() toString() Signature public override String toString() toString() Signature public override String toString() withDataCategoryAbove(groupName, category) Signature public Builder withDataCategoryAbove(\t\t\tString groupName,\t\t\tString category\t\t) withDataCategoryAboveOrBelow(groupName, category) Signature public Builder withDataCategoryAboveOrBelow(\t\t\tString groupName,\t\t\tString category\t\t) withDataCategoryAt(groupName, category) Signature public Builder withDataCategoryAt(String groupName, String category) withDataCategoryBelow(groupName, category) Signature public Builder withDataCategoryBelow(\t\t\tString groupName,\t\t\tString category\t\t) withDivision(division) Signature public Builder withDivision(String division) withHighlight() Signature public Builder withHighlight() withNetworkId(networkId) Signature public Builder withNetworkId(String networkId) withNetworkIds(networkIds) Signature public Builder withNetworkIds(List<String> networkIds) withNetworkIds(networkIds) Signature public Builder withNetworkIds(Set<String> networkIds) withPricebookId(pricebookId) Signature public Builder withPricebookId(String pricebookId) withSnippet(snippetTargetLength) Signature public Builder withSnippet(Integer snippetTargetLength) withSpellCorrection(isSpellCorrectionEnabled) Signature public Builder withSpellCorrection(Boolean isSpellCorrectionEnabled) SOSL.Builder Signature public class Builder SOSL.Builder Properties Name Signature Annotations dataCategorySpecs private List<DataCategorySpec> dataCategorySpecs @TestVisible division private String division @TestVisible networkIds private Set<String> networkIds @TestVisible numberOfRows private Integer numberOfRows @TestVisible pricebookId private String pricebookId @TestVisible returningFieldSpecs private List<Query.ReturningFieldSpec> returningFieldSpecs @TestVisible searchCondition private Query.SearchCondition searchCondition @TestVisible searchGroup private Query.SearchGroup searchGroup @TestVisible snippet private String snippet @TestVisible snippetTargetLength private Integer snippetTargetLength @TestVisible spellCorrection private String spellCorrection @TestVisible statementUpdate private Set<String> statementUpdate @TestVisible withHighlight private Boolean withHighlight @TestVisible SOSL.Builder Constructors Builder(searchPhrase) Builder(searchCondition) Builder(searchPhrase) Signature public Builder(String searchPhrase) Builder(searchCondition) Signature public Builder(Query.SearchCondition searchCondition) SOSL.Builder Methods addReturningFieldSpec(returningFieldSpec) withSearchGroup(searchGroup) addReturningFieldSpec(returningFieldSpec) Signature public Builder addReturningFieldSpec(\t\t\tQuery.ReturningFieldSpec returningFieldSpec\t\t) withSearchGroup(searchGroup) Signature public Builder withSearchGroup(Query.SearchGroup searchGroup) SOSL.DataCategorySpec Signature @TestVisible private class DataCategorySpec SOSL.DataCategorySpec Properties Name Signature Annotations category private String category @TestVisible groupName private String groupName @TestVisible operator private String operator @TestVisible SOSL.DataCategorySpec Constructors DataCategorySpec(groupName, operator, category) DataCategorySpec(groupName, operator, category) Signature private DataCategorySpec(\t\t\tString groupName,\t\t\tString operator,\t\t\tString category\t\t) SOSL.DataCategorySpec Methods toDataCategorySpecString() toString() toDataCategorySpecString() Signature public String toDataCategorySpecString() toString() Signature public override String toString()"
    },
    {
        "title": "QueryTest",
        "fileName": "QueryTest.html",
        "text": "QueryTest MIT License Copyright(c) 2020 Rafał Kopaczewski Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files(the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software. THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE. Signature @IsTest public with sharing class QueryTest QueryTest Methods assertFieldConditionExpression(fieldName, comparisonOperator, value, condition) expectedValueFormat2Value.keySet() prepareExpectedConditionString(condition) selectTestUser() testConditionConjunctionToExpressionString() testConditionDefaultConstructor() testConditionDenialExpressionConstructor() testConditionDenialExpressionToExpressionString() testConditionDenialExpressionToStringOverride() testConditionDisjunctionToExpressionString() testConditionEquals() testConditionExcludesSetOfValueSets() testConditionExcludesValueSet() testConditionExpressionConstructor() testConditionExpressionToExpressionString() testConditionExpressionToStringOverride() testConditionGreaterOrEquals() testConditionGreaterThan() testConditionIncludesSetOfValueSets() testConditionIncludesValueSet() testConditionIsIn() testConditionIsLike() testConditionIsNotIn() testConditionLessOrEqual() testConditionLessThan() testConditionNotEquals() testConditionParametrizedConstructor() testConditionToExpressionStringUnsupporterOperator() testConditionToStringOverride() testConditionWithNegatedSubcondition() testConditionWithSubcondition() testDateLiteralConstructorForDateLiteralName() testDateLiteralConstructorForDateLiteralNameWithNumberOfUnits() testDateLiteralToDateLiteralStringForDateLiteralName() testDateLiteralToDateLiteralStringForDateLiteralNameWithNumberOfUnits() testDateLiteralToStringOverride() testDenialSearchExpressionConstructor() testDenialSearchExpressionToExpressionString() testDenialSearchExpressionToStringOverride() testFieldExpressionConstructor() testFieldExpressionToExpressionString() testFieldExpressionToStringOverride() testFieldExpressionValueFormat() testFieldExpressionValueFormatUnsupportedValue() testPhraseExpressionConstructor() testPhraseExpressionToExpressionString() testPhraseExpressionToStringOverride() testScriptVariableConstructor() testScriptVariableToScriptVariableString() testScriptVariableToStringOverride() testSearchExpressionConstructor() testSearchExpressionToExpressionString() testSearchExpressionToStringOverride() testSetup() testSortOrderConstructorFieldName() testSortOrderConstructorNullRecords() testSortOrderConstructorSortDirection() testSortOrderStringAscendingNullsFirst() testSortOrderStringAscendingNullsLast() testSortOrderStringDescendingNullsFirst() testSortOrderStringDescendingNullsLast() testSortOrderToStringOverride() testTypeOfConstructor() testTypeOfElseFieldListWithFieldList() testTypeOfElseFieldListWithFieldSet() testTypeOfElseFieldListWithSingleField() testTypeOfString() testTypeOftoStringOverride() testTypeOfWhenSObjectTypeWithFieldList() testTypeOfWhenSObjectTypeWithFieldSet() assertFieldConditionExpression(fieldName, comparisonOperator, value, condition) Signature private static void assertFieldConditionExpression(\t\tString fieldName,\t\tString comparisonOperator,\t\tObject value,\t\tQuery.Condition condition\t) expectedValueFormat2Value.keySet() Signature String expectedValueFormat : expectedValueFormat2Value.keySet() prepareExpectedConditionString(condition) Signature private static String prepareExpectedConditionString(\t\tQuery.Condition condition\t) selectTestUser() Signature private static User selectTestUser() testConditionConjunctionToExpressionString() Signature @IsTest private static void testConditionConjunctionToExpressionString() testConditionDefaultConstructor() Signature @IsTest private static void testConditionDefaultConstructor() testConditionDenialExpressionConstructor() Signature @IsTest private static void testConditionDenialExpressionConstructor() testConditionDenialExpressionToExpressionString() Signature @IsTest private static void testConditionDenialExpressionToExpressionString() testConditionDenialExpressionToStringOverride() Signature @IsTest private static void testConditionDenialExpressionToStringOverride() testConditionDisjunctionToExpressionString() Signature @IsTest private static void testConditionDisjunctionToExpressionString() testConditionEquals() Signature @IsTest private static void testConditionEquals() testConditionExcludesSetOfValueSets() Signature @IsTest private static void testConditionExcludesSetOfValueSets() testConditionExcludesValueSet() Signature @IsTest private static void testConditionExcludesValueSet() testConditionExpressionConstructor() Signature @IsTest private static void testConditionExpressionConstructor() testConditionExpressionToExpressionString() Signature @IsTest private static void testConditionExpressionToExpressionString() testConditionExpressionToStringOverride() Signature @IsTest private static void testConditionExpressionToStringOverride() testConditionGreaterOrEquals() Signature @IsTest private static void testConditionGreaterOrEquals() testConditionGreaterThan() Signature @IsTest private static void testConditionGreaterThan() testConditionIncludesSetOfValueSets() Signature @IsTest private static void testConditionIncludesSetOfValueSets() testConditionIncludesValueSet() Signature @IsTest private static void testConditionIncludesValueSet() testConditionIsIn() Signature @IsTest private static void testConditionIsIn() testConditionIsLike() Signature @IsTest private static void testConditionIsLike() testConditionIsNotIn() Signature @IsTest private static void testConditionIsNotIn() testConditionLessOrEqual() Signature @IsTest private static void testConditionLessOrEqual() testConditionLessThan() Signature @IsTest private static void testConditionLessThan() testConditionNotEquals() Signature @IsTest private static void testConditionNotEquals() testConditionParametrizedConstructor() Signature @IsTest private static void testConditionParametrizedConstructor() testConditionToExpressionStringUnsupporterOperator() Signature @IsTest private static void testConditionToExpressionStringUnsupporterOperator() testConditionToStringOverride() Signature @IsTest private static void testConditionToStringOverride() testConditionWithNegatedSubcondition() Signature @IsTest private static void testConditionWithNegatedSubcondition() testConditionWithSubcondition() Signature @IsTest private static void testConditionWithSubcondition() testDateLiteralConstructorForDateLiteralName() Signature @IsTest private static void testDateLiteralConstructorForDateLiteralName() testDateLiteralConstructorForDateLiteralNameWithNumberOfUnits() Signature @IsTest private static void testDateLiteralConstructorForDateLiteralNameWithNumberOfUnits() testDateLiteralToDateLiteralStringForDateLiteralName() Signature @IsTest private static void testDateLiteralToDateLiteralStringForDateLiteralName() testDateLiteralToDateLiteralStringForDateLiteralNameWithNumberOfUnits() Signature @IsTest private static void testDateLiteralToDateLiteralStringForDateLiteralNameWithNumberOfUnits() testDateLiteralToStringOverride() Signature @IsTest private static void testDateLiteralToStringOverride() testDenialSearchExpressionConstructor() Signature @IsTest private static void testDenialSearchExpressionConstructor() testDenialSearchExpressionToExpressionString() Signature @IsTest private static void testDenialSearchExpressionToExpressionString() testDenialSearchExpressionToStringOverride() Signature @IsTest private static void testDenialSearchExpressionToStringOverride() testFieldExpressionConstructor() Signature @IsTest private static void testFieldExpressionConstructor() testFieldExpressionToExpressionString() Signature @IsTest private static void testFieldExpressionToExpressionString() testFieldExpressionToStringOverride() Signature @IsTest private static void testFieldExpressionToStringOverride() testFieldExpressionValueFormat() Signature @IsTest private static void testFieldExpressionValueFormat() testFieldExpressionValueFormatUnsupportedValue() Signature @IsTest private static void testFieldExpressionValueFormatUnsupportedValue() testPhraseExpressionConstructor() Signature @IsTest private static void testPhraseExpressionConstructor() testPhraseExpressionToExpressionString() Signature @IsTest private static void testPhraseExpressionToExpressionString() testPhraseExpressionToStringOverride() Signature @IsTest private static void testPhraseExpressionToStringOverride() testScriptVariableConstructor() Signature @IsTest private static void testScriptVariableConstructor() testScriptVariableToScriptVariableString() Signature @IsTest private static void testScriptVariableToScriptVariableString() testScriptVariableToStringOverride() Signature @IsTest private static void testScriptVariableToStringOverride() testSearchExpressionConstructor() Signature @IsTest private static void testSearchExpressionConstructor() testSearchExpressionToExpressionString() Signature @IsTest private static void testSearchExpressionToExpressionString() testSearchExpressionToStringOverride() Signature @IsTest private static void testSearchExpressionToStringOverride() testSetup() Signature @TestSetup private static void testSetup() testSortOrderConstructorFieldName() Signature @IsTest private static void testSortOrderConstructorFieldName() testSortOrderConstructorNullRecords() Signature @IsTest private static void testSortOrderConstructorNullRecords() testSortOrderConstructorSortDirection() Signature @IsTest private static void testSortOrderConstructorSortDirection() testSortOrderStringAscendingNullsFirst() Signature @IsTest private static void testSortOrderStringAscendingNullsFirst() testSortOrderStringAscendingNullsLast() Signature @IsTest private static void testSortOrderStringAscendingNullsLast() testSortOrderStringDescendingNullsFirst() Signature @IsTest private static void testSortOrderStringDescendingNullsFirst() testSortOrderStringDescendingNullsLast() Signature @IsTest private static void testSortOrderStringDescendingNullsLast() testSortOrderToStringOverride() Signature @IsTest private static void testSortOrderToStringOverride() testTypeOfConstructor() Signature @IsTest private static void testTypeOfConstructor() testTypeOfElseFieldListWithFieldList() Signature @IsTest private static void testTypeOfElseFieldListWithFieldList() testTypeOfElseFieldListWithFieldSet() Signature @IsTest private static void testTypeOfElseFieldListWithFieldSet() testTypeOfElseFieldListWithSingleField() Signature @IsTest private static void testTypeOfElseFieldListWithSingleField() testTypeOfString() Signature @IsTest private static void testTypeOfString() testTypeOftoStringOverride() Signature @IsTest private static void testTypeOftoStringOverride() testTypeOfWhenSObjectTypeWithFieldList() Signature @IsTest private static void testTypeOfWhenSObjectTypeWithFieldList() testTypeOfWhenSObjectTypeWithFieldSet() Signature @IsTest private static void testTypeOfWhenSObjectTypeWithFieldSet()"
    },
    {
        "title": "SOQLAgregateTest",
        "fileName": "SOQLAgregateTest.html",
        "text": "SOQLAgregateTest MIT License Copyright(c) 2020 Rafał Kopaczewski Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files(the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software. THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE. Signature @IsTest public with sharing class SOQLAgregateTest SOQLAgregateTest Methods selectTestUser() testSetup() testSOQLAgregateBuilderAddWhereCondition() testSOQLAgregateBuilderAverage() testSOQLAgregateBuilderAverageWithAlias() testSOQLAgregateBuilderBuildSOQLAgregateQuery() testSOQLAgregateBuilderBuildSOQLQueryGroupByCube() testSOQLAgregateBuilderBuildSOQLQueryGroupByRollup() testSOQLAgregateBuilderConstructor() testSOQLAgregateBuilderCount() testSOQLAgregateBuilderCountDistinct() testSOQLAgregateBuilderCountDistinctWithAlias() testSOQLAgregateBuilderCountWithAlias() testSOQLAgregateBuilderGroupBy() testSOQLAgregateBuilderGroupByCube() testSOQLAgregateBuilderGroupByCubeWithGroupingAlias() testSOQLAgregateBuilderGroupByRollup() testSOQLAgregateBuilderGroupByRollupWithGroupingAlias() testSOQLAgregateBuilderMaximum() testSOQLAgregateBuilderMaximumWithAlias() testSOQLAgregateBuilderMinimum() testSOQLAgregateBuilderMinimumWithAlias() testSOQLAgregateBuilderOffset() testSOQLAgregateBuilderOrderByWithDirectionAndNullRecordsOrder() testSOQLAgregateBuilderScopeLimit() testSOQLAgregateBuilderSum() testSOQLAgregateBuilderSumWithAlias() testSOQLAgregateBuilderToStringOverride() testSOQLAgregateConstructor() testSOQLAgregateGetAggregateResults() testSOQLAgregateGetQueryString() testSOQLAgregateToStringOverride() selectTestUser() Signature private static User selectTestUser() testSetup() Signature @TestSetup private static void testSetup() testSOQLAgregateBuilderAddWhereCondition() Signature @IsTest private static void testSOQLAgregateBuilderAddWhereCondition() testSOQLAgregateBuilderAverage() Signature @IsTest private static void testSOQLAgregateBuilderAverage() testSOQLAgregateBuilderAverageWithAlias() Signature @IsTest private static void testSOQLAgregateBuilderAverageWithAlias() testSOQLAgregateBuilderBuildSOQLAgregateQuery() Signature @IsTest private static void testSOQLAgregateBuilderBuildSOQLAgregateQuery() testSOQLAgregateBuilderBuildSOQLQueryGroupByCube() Signature @IsTest private static void testSOQLAgregateBuilderBuildSOQLQueryGroupByCube() testSOQLAgregateBuilderBuildSOQLQueryGroupByRollup() Signature @IsTest private static void testSOQLAgregateBuilderBuildSOQLQueryGroupByRollup() testSOQLAgregateBuilderConstructor() Signature @IsTest private static void testSOQLAgregateBuilderConstructor() testSOQLAgregateBuilderCount() Signature @IsTest private static void testSOQLAgregateBuilderCount() testSOQLAgregateBuilderCountDistinct() Signature @IsTest private static void testSOQLAgregateBuilderCountDistinct() testSOQLAgregateBuilderCountDistinctWithAlias() Signature @IsTest private static void testSOQLAgregateBuilderCountDistinctWithAlias() testSOQLAgregateBuilderCountWithAlias() Signature @IsTest private static void testSOQLAgregateBuilderCountWithAlias() testSOQLAgregateBuilderGroupBy() Signature @IsTest private static void testSOQLAgregateBuilderGroupBy() testSOQLAgregateBuilderGroupByCube() Signature @IsTest private static void testSOQLAgregateBuilderGroupByCube() testSOQLAgregateBuilderGroupByCubeWithGroupingAlias() Signature @IsTest private static void testSOQLAgregateBuilderGroupByCubeWithGroupingAlias() testSOQLAgregateBuilderGroupByRollup() Signature @IsTest private static void testSOQLAgregateBuilderGroupByRollup() testSOQLAgregateBuilderGroupByRollupWithGroupingAlias() Signature @IsTest private static void testSOQLAgregateBuilderGroupByRollupWithGroupingAlias() testSOQLAgregateBuilderMaximum() Signature @IsTest private static void testSOQLAgregateBuilderMaximum() testSOQLAgregateBuilderMaximumWithAlias() Signature @IsTest private static void testSOQLAgregateBuilderMaximumWithAlias() testSOQLAgregateBuilderMinimum() Signature @IsTest private static void testSOQLAgregateBuilderMinimum() testSOQLAgregateBuilderMinimumWithAlias() Signature @IsTest private static void testSOQLAgregateBuilderMinimumWithAlias() testSOQLAgregateBuilderOffset() Signature @IsTest private static void testSOQLAgregateBuilderOffset() testSOQLAgregateBuilderOrderByWithDirectionAndNullRecordsOrder() Signature @IsTest private static void testSOQLAgregateBuilderOrderByWithDirectionAndNullRecordsOrder() testSOQLAgregateBuilderScopeLimit() Signature @IsTest private static void testSOQLAgregateBuilderScopeLimit() testSOQLAgregateBuilderSum() Signature @IsTest private static void testSOQLAgregateBuilderSum() testSOQLAgregateBuilderSumWithAlias() Signature @IsTest private static void testSOQLAgregateBuilderSumWithAlias() testSOQLAgregateBuilderToStringOverride() Signature @IsTest private static void testSOQLAgregateBuilderToStringOverride() testSOQLAgregateConstructor() Signature @IsTest private static void testSOQLAgregateConstructor() testSOQLAgregateGetAggregateResults() Signature @IsTest private static void testSOQLAgregateGetAggregateResults() testSOQLAgregateGetQueryString() Signature @IsTest private static void testSOQLAgregateGetQueryString() testSOQLAgregateToStringOverride() Signature @IsTest private static void testSOQLAgregateToStringOverride()"
    },
    {
        "title": "SOQLTest",
        "fileName": "SOQLTest.html",
        "text": "SOQLTest MIT License Copyright(c) 2020 Rafał Kopaczewski Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files(the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software. THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE. Signature @IsTest public with sharing class SOQLTest SOQLTest Methods selectTestUser() testSetup() testSOQLBuilderAddScope() testSOQLBuilderAddSubQuery() testSOQLBuilderAddTypeOf() testSOQLBuilderConstructor() testSOQLBuilderOrderBy() testSOQLBuilderSelectFieldsAsList() testSOQLBuilderSelectFieldsAsSet() testSOQLBuilderSelectSingleField() testSOQLBuilderSetForReference() testSOQLBuilderSetForUpdate() testSOQLBuilderSetForView() testSOQLBuilderSetOffset() testSOQLBuilderSetScopeLimit() testSOQLBuilderSetUpdateTracking() testSOQLBuilderSetUpdateViewStat() testSOQLBuilderToStringOverride() testSOQLBuilderWhereCondition() testSOQLBuilderWithForStatement() testSOQLBuilderWithFromStatement() testSOQLBuilderWithLimitStatement() testSOQLBuilderWithOffsetStatement() testSOQLBuilderWithOrderStatement() testSOQLBuilderWithScopeStatement() testSOQLBuilderWithSelectStatement() testSOQLBuilderWithUpdateStatement() testSOQLBuilderWithWhereStatement() testSOQLConstructor() testSOQLGetQueryLocator() testSOQLGetQueryString() testSOQLGetRecord() testSOQLGetRecords() testSOQLToStringOverride() selectTestUser() Signature private static User selectTestUser() testSetup() Signature @TestSetup private static void testSetup() testSOQLBuilderAddScope() Signature @IsTest private static void testSOQLBuilderAddScope() testSOQLBuilderAddSubQuery() Signature @IsTest private static void testSOQLBuilderAddSubQuery() testSOQLBuilderAddTypeOf() Signature @IsTest private static void testSOQLBuilderAddTypeOf() testSOQLBuilderConstructor() Signature @IsTest private static void testSOQLBuilderConstructor() testSOQLBuilderOrderBy() Signature @IsTest private static void testSOQLBuilderOrderBy() testSOQLBuilderSelectFieldsAsList() Signature @IsTest private static void testSOQLBuilderSelectFieldsAsList() testSOQLBuilderSelectFieldsAsSet() Signature @IsTest private static void testSOQLBuilderSelectFieldsAsSet() testSOQLBuilderSelectSingleField() Signature @IsTest private static void testSOQLBuilderSelectSingleField() testSOQLBuilderSetForReference() Signature @IsTest private static void testSOQLBuilderSetForReference() testSOQLBuilderSetForUpdate() Signature @IsTest private static void testSOQLBuilderSetForUpdate() testSOQLBuilderSetForView() Signature @IsTest private static void testSOQLBuilderSetForView() testSOQLBuilderSetOffset() Signature @IsTest private static void testSOQLBuilderSetOffset() testSOQLBuilderSetScopeLimit() Signature @IsTest private static void testSOQLBuilderSetScopeLimit() testSOQLBuilderSetUpdateTracking() Signature @IsTest private static void testSOQLBuilderSetUpdateTracking() testSOQLBuilderSetUpdateViewStat() Signature @IsTest private static void testSOQLBuilderSetUpdateViewStat() testSOQLBuilderToStringOverride() Signature @IsTest private static void testSOQLBuilderToStringOverride() testSOQLBuilderWhereCondition() Signature @IsTest private static void testSOQLBuilderWhereCondition() testSOQLBuilderWithForStatement() Signature @IsTest private static void testSOQLBuilderWithForStatement() testSOQLBuilderWithFromStatement() Signature @IsTest private static void testSOQLBuilderWithFromStatement() testSOQLBuilderWithLimitStatement() Signature @IsTest private static void testSOQLBuilderWithLimitStatement() testSOQLBuilderWithOffsetStatement() Signature @IsTest private static void testSOQLBuilderWithOffsetStatement() testSOQLBuilderWithOrderStatement() Signature @IsTest private static void testSOQLBuilderWithOrderStatement() testSOQLBuilderWithScopeStatement() Signature @IsTest private static void testSOQLBuilderWithScopeStatement() testSOQLBuilderWithSelectStatement() Signature @IsTest private static void testSOQLBuilderWithSelectStatement() testSOQLBuilderWithUpdateStatement() Signature @IsTest private static void testSOQLBuilderWithUpdateStatement() testSOQLBuilderWithWhereStatement() Signature @IsTest private static void testSOQLBuilderWithWhereStatement() testSOQLConstructor() Signature @IsTest private static void testSOQLConstructor() testSOQLGetQueryLocator() Signature @IsTest private static void testSOQLGetQueryLocator() testSOQLGetQueryString() Signature @IsTest private static void testSOQLGetQueryString() testSOQLGetRecord() Signature @IsTest private static void testSOQLGetRecord() testSOQLGetRecords() Signature @IsTest private static void testSOQLGetRecords() testSOQLToStringOverride() Signature @IsTest private static void testSOQLToStringOverride()"
    },
    {
        "title": "SOSLTest",
        "fileName": "SOSLTest.html",
        "text": "SOSLTest MIT License Copyright(c) 2020 Rafał Kopaczewski Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files(the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software. THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE. Signature @IsTest public with sharing class SOSLTest SOSLTest Methods selectTestUser() testDataCategorySpecConstructor() testDataCategoryToDataCategorySpecString() testDataCategoryToStringOverride() testReturningFieldSpecConstructorBySObjectType() testReturningFieldSpecConstructorBySObjectTypeName() testReturningFieldSpecOffset() testReturningFieldSpecOrderByWithDirectionAndNullRecordsOrder() testReturningFieldSpecScopeLimit() testReturningFieldSpecSelectField() testReturningFieldSpecSelectFieldsFromList() testReturningFieldSpecSelectFieldsFromSet() testReturningFieldSpecToReturningFieldSpecString() testReturningFieldSpecToStringOverride() testReturningFieldSpecUsingListView() testReturningFieldSpecWhereCondition() testSearchConditionConstructor() testSearchConditionConstructorWithLogicalOperator() testSearchConditionFind() testSearchConditionNegateSubSearchCondition() testSearchConditionSubSearchCondition() testSearchConditionToConditionString() testSearchConditionToConditionStringUnsupportedOperator() testSearchConditionToStringOverride() testSetup() testSOSLBuilderAddReturningFieldSpec() testSOSLBuilderToStringOverride() testSOSLBuilderWithDataCategoryAbove() testSOSLBuilderWithDataCategoryAboveOrBelow() testSOSLBuilderWithDataCategoryAt() testSOSLBuilderWithDataCategoryBelow() testSOSLBuilderWithDataCategoryStatement() testSOSLBuilderWithDivision() testSOSLBuilderWithDivisionStatement() testSOSLBuilderWithFindStatement() testSOSLBuilderWithHighlight() testSOSLBuilderWithHighlightStatement() testSOSLBuilderWithLimitStatement() testSOSLBuilderWithNetworkId() testSOSLBuilderWithNetworkIdsList() testSOSLBuilderWithNetworkIdsSet() testSOSLBuilderWithNetworkStatement() testSOSLBuilderWithPricebookId() testSOSLBuilderWithPricebookIdStatement() testSOSLBuilderWithReturningStatement() testSOSLBuilderWithScopeLimit() testSOSLBuilderWithSearchCondition() testSOSLBuilderWithSearchGroup() testSOSLBuilderWithSearchGroupStatement() testSOSLBuilderWithSearchPhrase() testSOSLBuilderWithSnippet() testSOSLBuilderWithSnippetStatement() testSOSLBuilderWithSpellCorrection() testSOSLBuilderWithSpellCorrectionStatement() testSOSLBuilderWithTrackingUpdate() testSOSLBuilderWithUpdateStatement() testSOSLBuilderWithViewStatUpdate() testSOSLConstructor() testSOSLFind() testSOSLGetQueryString() testSOSLQuery() testSOSLToStringOverride() selectTestUser() Signature private static User selectTestUser() testDataCategorySpecConstructor() Signature @IsTest private static void testDataCategorySpecConstructor() testDataCategoryToDataCategorySpecString() Signature @IsTest private static void testDataCategoryToDataCategorySpecString() testDataCategoryToStringOverride() Signature @IsTest private static void testDataCategoryToStringOverride() testReturningFieldSpecConstructorBySObjectType() Signature @IsTest private static void testReturningFieldSpecConstructorBySObjectType() testReturningFieldSpecConstructorBySObjectTypeName() Signature @IsTest private static void testReturningFieldSpecConstructorBySObjectTypeName() testReturningFieldSpecOffset() Signature @IsTest private static void testReturningFieldSpecOffset() testReturningFieldSpecOrderByWithDirectionAndNullRecordsOrder() Signature @IsTest private static void testReturningFieldSpecOrderByWithDirectionAndNullRecordsOrder() testReturningFieldSpecScopeLimit() Signature @IsTest private static void testReturningFieldSpecScopeLimit() testReturningFieldSpecSelectField() Signature @IsTest private static void testReturningFieldSpecSelectField() testReturningFieldSpecSelectFieldsFromList() Signature @IsTest private static void testReturningFieldSpecSelectFieldsFromList() testReturningFieldSpecSelectFieldsFromSet() Signature @IsTest private static void testReturningFieldSpecSelectFieldsFromSet() testReturningFieldSpecToReturningFieldSpecString() Signature @IsTest private static void testReturningFieldSpecToReturningFieldSpecString() testReturningFieldSpecToStringOverride() Signature @IsTest private static void testReturningFieldSpecToStringOverride() testReturningFieldSpecUsingListView() Signature @IsTest private static void testReturningFieldSpecUsingListView() testReturningFieldSpecWhereCondition() Signature @IsTest private static void testReturningFieldSpecWhereCondition() testSearchConditionConstructor() Signature @IsTest private static void testSearchConditionConstructor() testSearchConditionConstructorWithLogicalOperator() Signature @IsTest private static void testSearchConditionConstructorWithLogicalOperator() testSearchConditionFind() Signature @IsTest private static void testSearchConditionFind() testSearchConditionNegateSubSearchCondition() Signature @IsTest private static void testSearchConditionNegateSubSearchCondition() testSearchConditionSubSearchCondition() Signature @IsTest private static void testSearchConditionSubSearchCondition() testSearchConditionToConditionString() Signature @IsTest private static void testSearchConditionToConditionString() testSearchConditionToConditionStringUnsupportedOperator() Signature @IsTest private static void testSearchConditionToConditionStringUnsupportedOperator() testSearchConditionToStringOverride() Signature @IsTest private static void testSearchConditionToStringOverride() testSetup() Signature @TestSetup private static void testSetup() testSOSLBuilderAddReturningFieldSpec() Signature @IsTest private static void testSOSLBuilderAddReturningFieldSpec() testSOSLBuilderToStringOverride() Signature @IsTest private static void testSOSLBuilderToStringOverride() testSOSLBuilderWithDataCategoryAbove() Signature @IsTest private static void testSOSLBuilderWithDataCategoryAbove() testSOSLBuilderWithDataCategoryAboveOrBelow() Signature @IsTest private static void testSOSLBuilderWithDataCategoryAboveOrBelow() testSOSLBuilderWithDataCategoryAt() Signature @IsTest private static void testSOSLBuilderWithDataCategoryAt() testSOSLBuilderWithDataCategoryBelow() Signature @IsTest private static void testSOSLBuilderWithDataCategoryBelow() testSOSLBuilderWithDataCategoryStatement() Signature @IsTest private static void testSOSLBuilderWithDataCategoryStatement() testSOSLBuilderWithDivision() Signature @IsTest private static void testSOSLBuilderWithDivision() testSOSLBuilderWithDivisionStatement() Signature @IsTest private static void testSOSLBuilderWithDivisionStatement() testSOSLBuilderWithFindStatement() Signature @IsTest private static void testSOSLBuilderWithFindStatement() testSOSLBuilderWithHighlight() Signature @IsTest private static void testSOSLBuilderWithHighlight() testSOSLBuilderWithHighlightStatement() Signature @IsTest private static void testSOSLBuilderWithHighlightStatement() testSOSLBuilderWithLimitStatement() Signature @IsTest private static void testSOSLBuilderWithLimitStatement() testSOSLBuilderWithNetworkId() Signature @IsTest private static void testSOSLBuilderWithNetworkId() testSOSLBuilderWithNetworkIdsList() Signature @IsTest private static void testSOSLBuilderWithNetworkIdsList() testSOSLBuilderWithNetworkIdsSet() Signature @IsTest private static void testSOSLBuilderWithNetworkIdsSet() testSOSLBuilderWithNetworkStatement() Signature @IsTest private static void testSOSLBuilderWithNetworkStatement() testSOSLBuilderWithPricebookId() Signature @IsTest private static void testSOSLBuilderWithPricebookId() testSOSLBuilderWithPricebookIdStatement() Signature @IsTest private static void testSOSLBuilderWithPricebookIdStatement() testSOSLBuilderWithReturningStatement() Signature @IsTest private static void testSOSLBuilderWithReturningStatement() testSOSLBuilderWithScopeLimit() Signature @IsTest private static void testSOSLBuilderWithScopeLimit() testSOSLBuilderWithSearchCondition() Signature @IsTest private static void testSOSLBuilderWithSearchCondition() testSOSLBuilderWithSearchGroup() Signature @IsTest private static void testSOSLBuilderWithSearchGroup() testSOSLBuilderWithSearchGroupStatement() Signature @IsTest private static void testSOSLBuilderWithSearchGroupStatement() testSOSLBuilderWithSearchPhrase() Signature @IsTest private static void testSOSLBuilderWithSearchPhrase() testSOSLBuilderWithSnippet() Signature @IsTest private static void testSOSLBuilderWithSnippet() testSOSLBuilderWithSnippetStatement() Signature @IsTest private static void testSOSLBuilderWithSnippetStatement() testSOSLBuilderWithSpellCorrection() Signature @IsTest private static void testSOSLBuilderWithSpellCorrection() testSOSLBuilderWithSpellCorrectionStatement() Signature @IsTest private static void testSOSLBuilderWithSpellCorrectionStatement() testSOSLBuilderWithTrackingUpdate() Signature @IsTest private static void testSOSLBuilderWithTrackingUpdate() testSOSLBuilderWithUpdateStatement() Signature @IsTest private static void testSOSLBuilderWithUpdateStatement() testSOSLBuilderWithViewStatUpdate() Signature @IsTest private static void testSOSLBuilderWithViewStatUpdate() testSOSLConstructor() Signature @IsTest private static void testSOSLConstructor() testSOSLFind() Signature @IsTest private static void testSOSLFind() testSOSLGetQueryString() Signature @IsTest private static void testSOSLGetQueryString() testSOSLQuery() Signature @IsTest private static void testSOSLQuery() testSOSLToStringOverride() Signature @IsTest private static void testSOSLToStringOverride()"
    },
    {
        "title": "QuiddityGuard",
        "fileName": "QuiddityGuard.html",
        "text": "QuiddityGuard contains methods and static lists for rapid acceptence of a particular set of quiddities Signature public with sharing class QuiddityGuard QuiddityGuard Properties Name Signature Annotations Description testQuiddityOverride private static Quiddity testQuiddityOverride @TestVisible a private testvisible variable allowing developers to inject a custom quiddity value during test execution. trustedQuiddities public static List<Quiddity> trustedQuiddities a non-exhaustive list of Quiddities that do not include user situations where users could be injecting malicious data. trustedTestQuiddities public static List<Quiddity> trustedTestQuiddities An exaustive list of quiddities that are valid for a test execution untrustedQuiddities public static List<Quiddity> untrustedQuiddities A list of quiddities that may include user-defined data and therefore should not be trusted without manual FLS/CRUD checks QuiddityGuard Methods isAcceptableQuiddity(acceptableQuiddites) A method to determine if the current Quiddity context is within a caller-supplied list of acceptable quiddity values. isNotAcceptableQuiddity(acceptableQuiddites) quiddity() quiddityIsATestContext() isAcceptableQuiddity(acceptableQuiddites) A method to determine if the current Quiddity context is within a caller-supplied list of acceptable quiddity values. Signature public static Boolean isAcceptableQuiddity(\t\tList<Quiddity> acceptableQuiddites\t) Parameters acceptableQuiddites Type: \t\tList<Quiddity> A list of quiddities to check against Returns boolean isNotAcceptableQuiddity(acceptableQuiddites) Signature public static Boolean isNotAcceptableQuiddity(\t\tList<Quiddity> acceptableQuiddites\t) quiddity() Signature public static Quiddity quiddity() quiddityIsATestContext() Signature public static Boolean quiddityIsATestContext()"
    },
    {
        "title": "QuiddityGuardTests",
        "fileName": "QuiddityGuardTests.html",
        "text": "QuiddityGuardTests Signature @isTest private class QuiddityGuardTests QuiddityGuardTests Methods testIsNotAcceptableQuiddityPositive() testQuiddityGuardFindsTestQuiddityPositive() testQuiddityOverrideReturnsFalsePositive() testQuiddityPositive() testIsNotAcceptableQuiddityPositive() Signature @isTest private static void testIsNotAcceptableQuiddityPositive() testQuiddityGuardFindsTestQuiddityPositive() Signature @isTest private static void testQuiddityGuardFindsTestQuiddityPositive() testQuiddityOverrideReturnsFalsePositive() Signature @isTest private static void testQuiddityOverrideReturnsFalsePositive() testQuiddityPositive() Signature @isTest private static void testQuiddityPositive()"
    },
    {
        "title": "AsyncRestClient",
        "fileName": "AsyncRestClient.html",
        "text": "AsyncRestClient Signature public with sharing class AsyncRestClient implements System.Queueable, Database.AllowsCallouts AsyncRestClient Properties Name Signature apiCall private RestLibApiCall apiCall handlerClass private Type handlerClass namedCredentialName private String namedCredentialName AsyncRestClient Constructors AsyncRestClient(NamedCredentialName, apiCall, handlerClass) AsyncRestClient(NamedCredentialName, apiCall, handlerClass) Signature public AsyncRestClient(\t\tString NamedCredentialName,\t\tRestLibApiCall apiCall,\t\tType handlerClass\t) AsyncRestClient Methods execute(qc) execute(qc) Signature public void execute(QueueableContext qc)"
    },
    {
        "title": "AsyncRestLibFinalizer",
        "fileName": "AsyncRestLibFinalizer.html",
        "text": "AsyncRestLibFinalizer Signature public with sharing abstract class AsyncRestLibFinalizer implements Finalizer AsyncRestLibFinalizer Properties Name Signature response public HttpResponse response AsyncRestLibFinalizer Methods execute(response) execute(fc) execute(response) Signature abstract void execute(HttpResponse response) execute(fc) Signature private void execute(finalizerContext fc)"
    },
    {
        "title": "HttpVerb",
        "fileName": "HttpVerb.html",
        "text": "HttpVerb This ENUM lists possible HTTP Verbs. Note: 'Delete' is an Apex Keyword(DML) and as a result, the ENUM value 'DEL' is used for delete. Signature public enum HttpVerb Values GET POST PATCH PUT HEAD DEL"
    },
    {
        "title": "RestClient",
        "fileName": "RestClient.html",
        "text": "RestClient Signature public virtual class RestClient extends RestLib RestClient Constructors RestClient(namedCredentialName) RestClient() RestClient(namedCredentialName) Signature public RestClient(String namedCredentialName) RestClient() Signature return new RestClient(namedCredential).makeApiCall(apiCall) RestClient Methods makeApiCall(namedCredential, apiCall) A static wrapper for the main makeApiCall method makeApiCall(namedCredential, apiCall) A static wrapper for the main makeApiCall method Signature public static HttpResponse makeApiCall(\t\tString namedCredential,\t\tRestLibApiCall apiCall\t) Parameters namedCredential Type: \t\tString The named credential to use method          HTTPVerb enum value. See Enum above path           Http path component of the URL. ie: /path/to/resource  query           Query component of the URL ie: after ?foo=bar  body            JSON string to post headers         Map<String,String> representing outgoing Request headers Returns HTTPResponse Example Log.get().publish(RestClient.makeApiCall('MockBin', RestClient.HttpVerb.GET, '4cb453a6-a23b-42ea-a6ba-9be1c1f17050', '', '', new Map<String,String>()));"
    },
    {
        "title": "RestClientLib",
        "fileName": "RestClientLib.html",
        "text": "RestClientLib Signature public with sharing virtual class RestClientLib extends RestClient RestClientLib Constructors RestClientLib(namedCredentialName) RestClientLib(namedCredentialName) Signature public RestClientLib(String namedCredentialName) RestClientLib Methods del(path) convenience method for deleting a resource based only on path del(path, query) convenience method for a Delete Call that only requires a path and query get(path) convenience method for a GET Call that only requires a path get(path, query) convenience method for a GET Call that only requires a path and query makeApiCall(method, path, query, body) Makes an HTTP Callout to an api resource. Convenience method that assumes the Default Headers. makeApiCall(method, path, query) convenience version of makeApiCall without body param. Invokes omnibus version above, with blank body param and default headers. makeApiCall(method, path) convenience version of makeApiCall without body or query params. Invokes omnibus version above, with blank body and query params patch(path, body) convenience method for a PATCH Call that only requires a path and body patch(path, query, body) convenience method for a PATCH Call that only requires a path, query and body post(path, body) convenience method for a POST Call that only requires a path and body post(path, query, body) convenience method for a POST Call that only requires a path, query and body put(path, body) convenience method for a PUT Call that only requires a path and body put(path, query, body) convenience method for a PUT Call that only requires a path, query and body del(path) convenience method for deleting a resource based only on path Signature @testVisible protected HttpResponse del(String path) Parameters path Type: String Http path component of the URL. ie: /path/to/resource Returns HTTPResponse del(path, query) convenience method for a Delete Call that only requires a path and query Signature @testVisible protected HttpResponse del(String path, String query) Parameters path Type: String Http path component of the URL. ie: /path/to/resource  query Type: String Query component of the URL ie: after ?foo=bar Returns HTTPResponse get(path) convenience method for a GET Call that only requires a path Signature @testVisible protected HttpResponse get(String path) Parameters path Type: String Http path component of the URL. ie: /path/to/resource Returns HTTPResponse get(path, query) convenience method for a GET Call that only requires a path and query Signature @testVisible protected HttpResponse get(String path, String query) Parameters path Type: String Http path component of the URL. ie: /path/to/resource  query Type: String Query component of the URL ie: after ?foo=bar Returns HTTPResponse makeApiCall(method, path, query, body) Makes an HTTP Callout to an api resource. Convenience method that assumes the Default Headers. Signature protected HttpResponse makeApiCall(\t\tHttpVerb method,\t\tString path,\t\tString query,\t\tString body\t) Parameters method Type: \t\tHttpVerb HTTPVerb to use. See the enum above. path   Http path component of the URL. ie: /path/to/resource  query  Query component of the URL ie: after ?foo=bar  body   Body to send with this call. Returns HttpResponse makeApiCall(method, path, query) convenience version of makeApiCall without body param. Invokes omnibus version above, with blank body param and default headers. Signature protected HttpResponse makeApiCall(\t\tHttpVerb method,\t\tString path,\t\tString query\t) Parameters method Type: \t\tHttpVerb HTTPVerb to use. See the enum above. path   Http path component of the URL. ie: /path/to/resource  query  Query component of the URL ie: after ?foo=bar Returns HTTPResponse makeApiCall(method, path) convenience version of makeApiCall without body or query params. Invokes omnibus version above, with blank body and query params Signature @testVisible protected HttpResponse makeApiCall(HttpVerb method, String path) Parameters method Type: HttpVerb HTTPVerb to use. See the enum above. path Type: String Http path component of the URL. ie: /path/to/resource Returns HTTPResponse patch(path, body) convenience method for a PATCH Call that only requires a path and body Signature @testVisible protected HttpResponse patch(String path, String body) Parameters path Type: String Http path component of the URL. ie: /path/to/resource  body Type: String JSON string to post Returns HTTPResponse patch(path, query, body) convenience method for a PATCH Call that only requires a path, query and body Signature @testVisible protected HttpResponse patch(String path, String query, String body) Parameters path Type: String Http path component of the URL. ie: /path/to/resource  query Type: String Query component of the URL ie: after ?foo=bar  body Type: String JSON string to post Returns HTTPResponse post(path, body) convenience method for a POST Call that only requires a path and body Signature @testVisible protected HttpResponse post(String path, String body) Parameters path Type: String Http path component of the URL. ie: /path/to/resource  body Type: String JSON string to post Returns HTTPResponse post(path, query, body) convenience method for a POST Call that only requires a path, query and body Signature @testVisible protected HttpResponse post(String path, String query, String body) Parameters path Type: String Http path component of the URL. ie: /path/to/resource  query Type: String Query component of the URL ie: after ?foo=bar  body Type: String JSON string to post Returns HTTPResponse put(path, body) convenience method for a PUT Call that only requires a path and body Signature @testVisible protected HttpResponse put(String path, String body) Parameters path Type: String Http path component of the URL. ie: /path/to/resource  body Type: String JSON string to post Returns HTTPResponse put(path, query, body) convenience method for a PUT Call that only requires a path, query and body Signature @testVisible protected HttpResponse put(String path, String query, String body) Parameters path Type: String Http path component of the URL. ie: /path/to/resource  query Type: String Query component of the URL ie: after ?foo=bar  body Type: String JSON string to post Returns HTTPResponse"
    },
    {
        "title": "RestLib",
        "fileName": "RestLib.html",
        "text": "RestLib Signature public with sharing virtual class RestLib RestLib Properties Name Signature Annotations Description namedCredentialName protected String namedCredentialName @testVisible The name of the Named Credential to use RestLib Constructors RestLib(namedCredential) Constructor that sets Named Credential RestLib() This constructor isn't intended for use, which is why it's access modifier is 'Protected'. However, any child class extending this class will either have to implement constructors matching the one above, or this constructor must exist. In order to make this abstraction as useful as possible, we've elected to leave this constructor here, but unavailable to anything but inner classes and classes that extend this one. RestLib(namedCredential) Constructor that sets Named Credential Signature public RestLib(String namedCredential) Parameters namedCredential Type: String name of the Named Credential to use RestLib() This constructor isn't intended for use, which is why it's access modifier is 'Protected'. However, any child class extending this class will either have to implement constructors matching the one above, or this constructor must exist. In order to make this abstraction as useful as possible, we've elected to leave this constructor here, but unavailable to anything but inner classes and classes that extend this one. Signature @SuppressWarnings('PMD.EmptyStatementBlock') protected RestLib() RestLib Methods makeApiCall(apiCall) Omnibus callout method. This is the primary method for making a REST callout. Most of the other methods in this class serve as convenient, syntactic sugar on this method. makeApiCall(apiCall) Omnibus callout method. This is the primary method for making a REST callout. Most of the other methods in this class serve as convenient, syntactic sugar on this method. Signature @SuppressWarnings('PMD.ExcessiveParameterList') protected HttpResponse makeApiCall(RestLibApiCall apiCall) Parameters method Enum HTTP verb to use. i.e. GET path patch component of the callout url i.e. /services/data/v39.0/SObjects  query Query portion of the URL i.e. ?q=SELECT Id FROM Account  body JSON string representing the body of the callout in post/patch situations headers A map<String,String> of headers to use while making this callout Returns HttpResponse  HttpResponse Obj"
    },
    {
        "title": "RestLibApiCall",
        "fileName": "RestLibApiCall.html",
        "text": "RestLibApiCall Signature public with sharing class RestLibApiCall RestLibApiCall Properties Name Signature Annotations Description body public String body defaultHeaders public static Map<String, String> defaultHeaders @testVisible The default headers to use, when none are specified encodedQuery public String encodedQuery functionalHeaders public Map<String, String> functionalHeaders hasBody public Boolean hasBody method public HttpVerb method path public String path query public String query RestLibApiCall Constructors RestLibApiCall() RestLibApiCall(method, path, query, body, headers) RestLibApiCall(method, path, query, body) RestLibApiCall() Signature @testVisible private RestLibApiCall() RestLibApiCall(method, path, query, body, headers) Signature public RestLibApiCall(\t\tHttpVerb method,\t\tString path,\t\tString query,\t\tString body,\t\tMap<String, String> headers\t) RestLibApiCall(method, path, query, body) Signature public RestLibApiCall(\t\tHttpVerb method,\t\tString path,\t\tString query,\t\tString body\t) RestLibApiCall Methods ensureStringEndsInSlash(resource) Ensures that the inputted string ends in a /  makes callouts more robust. ensureStringEndsInSlash(resource) Ensures that the inputted string ends in a /  makes callouts more robust. Signature @testVisible private String ensureStringEndsInSlash(String resource) Parameters resource Type: String string to ensure ends in / Returns inputted string with /  if it didn't already end in one."
    },
    {
        "title": "RestLibTests",
        "fileName": "RestLibTests.html",
        "text": "RestLibTests Signature @isTest private class RestLibTests RestLibTests Methods testConstructorPositive() Executes a positive test case of the Constructor. Expects the named credential to be set. testDelWithPathAndQueryPositive() testDelWithPathPositive() testEnsureStringEndsInSlashPositiveStartWithoutSlash() testGetWithPathAndQueryPositive() Convenience, Instance Methods These 6 methods are not utilized by our API service class. testGetWithPathPositive() Positive test case for convenience method needing only path and query params. testPatchWithPathAndBodyPositive() testPatchWithPathQueryAndBodyPositive() testPostWithPathAndBodyPositive() testPostWithPathQueryAndBodyPositive() testProtectedRestLibConstructorPositive() testPutWithPathAndBodyPositive() testPutWithPathQueryAndBodyPositive() testStaticMakeApiCallFullParamsPositive() Note: we do not have a constructor test for the no param constructor. Because it's access modifier is protected we cannot use that constructor - the compiler throws an error noting the method is not visible testStaticMakeApiCallNoHeadersOrBodyOrQueryParamsPositive() testStaticMakeApiCallNoHeadersOrBodyParamsPositive() testConstructorPositive() Executes a positive test case of the Constructor. Expects the named credential to be set. Signature @isTest private static void testConstructorPositive() testDelWithPathAndQueryPositive() Signature @isTest private static void testDelWithPathAndQueryPositive() testDelWithPathPositive() Signature @isTest private static void testDelWithPathPositive() testEnsureStringEndsInSlashPositiveStartWithoutSlash() Signature @isTest private static void testEnsureStringEndsInSlashPositiveStartWithoutSlash() testGetWithPathAndQueryPositive() Convenience, Instance Methods These 6 methods are not utilized by our API service class. Signature @isTest private static void testGetWithPathAndQueryPositive() testGetWithPathPositive() Positive test case for convenience method needing only path and query params. Signature @isTest private static void testGetWithPathPositive() testPatchWithPathAndBodyPositive() Signature @isTest private static void testPatchWithPathAndBodyPositive() testPatchWithPathQueryAndBodyPositive() Signature @isTest private static void testPatchWithPathQueryAndBodyPositive() testPostWithPathAndBodyPositive() Signature @isTest private static void testPostWithPathAndBodyPositive() testPostWithPathQueryAndBodyPositive() Signature @isTest private static void testPostWithPathQueryAndBodyPositive() testProtectedRestLibConstructorPositive() Signature @isTest private static void testProtectedRestLibConstructorPositive() testPutWithPathAndBodyPositive() Signature @isTest private static void testPutWithPathAndBodyPositive() testPutWithPathQueryAndBodyPositive() Signature @isTest private static void testPutWithPathQueryAndBodyPositive() testStaticMakeApiCallFullParamsPositive() Note: we do not have a constructor test for the no param constructor. Because it's access modifier is protected we cannot use that constructor - the compiler throws an error noting the method is not visible Signature @isTest private static void testStaticMakeApiCallFullParamsPositive() testStaticMakeApiCallNoHeadersOrBodyOrQueryParamsPositive() Signature @isTest private static void testStaticMakeApiCallNoHeadersOrBodyOrQueryParamsPositive() testStaticMakeApiCallNoHeadersOrBodyParamsPositive() Signature @isTest private static void testStaticMakeApiCallNoHeadersOrBodyParamsPositive()"
    },
    {
        "title": "CanTheUser",
        "fileName": "CanTheUser.html",
        "text": "CanTheUser A reusable, intuitive library for determining wether or not the current use can create, read, edit, or delete objects as well as determining if the user has access or update permissions on specific fields. This class name was chosen to facilitate easy-to-understand and read code. Whenever you need to check FLS or CRUD access your code reads like this if(CanTheUser.read(new account())){}  making the calling and use of this code easy and intuitive.  This class' name was chosen to facilitate easy-to-understand and read code. Whenever you need to check FLS or CRUD access your code reads like this if(CanTheUser.read(new account())){}  making the calling and use of this code easy and intuitive. Signature public with sharing class CanTheUser CanTheUser Properties Name Signature Annotations Description accessibleFieldsByObject private static Map<String, Set<String>> accessibleFieldsByObject @testVisible memoizedFLSResults private static Map<String, Map<FLSType, Boolean>> memoizedFLSResults This variable stores, within the same transaction, all previously calculated FLS results for an object. This prevents multiple calls to this library within the same transaction from executing more than a single describe call. updatableFieldsByObject private static Map<String, Set<String>> updatableFieldsByObject @testVisible Enums Name Signature Values CrudType public enum CrudType CREATEABLE, READABLE, EDITABLE, DELETABLE, UPSERTABLE FLSType public enum FLSType ACCESSIBLE, UPDATABLE CanTheUser Methods bulkFLSAccessible(obj, fields) bulk form of flsAccessible bulkFLSUpdatable(obj, fields) bulk form of flsUpdatable call calculateFLS(objType) Calculates the FLS for a given object type create(obj) convenience api for determining if the running user can create the specified object create(objs) convenience api for determining if the running user can create the specified object create(objName) convenience api for determining if the running user can create the specified object crud(obj, permission) crud(objs, permission) crud(objectName, permission) destroy(obj) convenience api for determining if the running user can delete/destroy the specified object destroy(objs) convenience api for determining if the running user can delete the specified object destroy(objName) convenience api for determining if the running user can delete the specified object edit(obj) convenience api for determining if the running user can edit / update the specified object edit(objs) convenience api for determining if the running user can edit / update the specified objects edit(objName) convenience api for determining if the running user can edit the specified object flsAccessible(obj, field) public static method to determine if a given field on a given object is Accessible(readable) flsUpdatable(obj, field) public static method to determine if a given field on a given object is Updatable. getFLSForFieldOnObject(obj, field, checkType) Abstracted method for retrieving or calculating(memoization) of the FLS for a given field on a given object. read(obj) convenience api for determining if the running user can read / access the specified object read(objs) convenience api for determining if the running user can read / access the specified objects read(objName) convenience api for determining if the running user can read the specified object ups(obj) convenience api for determining if the running user can upsert(insert and update) the specified objects ups(objs) convenience api for determining if the running user can edit / update the specified objects ups(objName) convenience api for determining if the running user can upsert the specified object bulkFLSAccessible(obj, fields) bulk form of flsAccessible Signature public static Map<String, Boolean> bulkFLSAccessible(\t\tString obj,\t\tSet<String> fields\t) Parameters obj Type: \t\tString Obj name on which to check fields Set of Fields to check for accessibility. Returns Map<String, Boolean> Example String[] fields = new String[]{'Name', 'ShippingStreet'}; System.debug(CanTheUser.bulkFLSAccessible('Account', fields)); bulkFLSUpdatable(obj, fields) bulk form of flsUpdatable call Signature public static Map<String, Boolean> bulkFLSUpdatable(\t\tString obj,\t\tSet<String> fields\t) Parameters obj Type: \t\tString Name of the object fields Set of Field names to check Returns Map<String, Boolean> Example String[] fields = new String[]{'Name', 'ShippingStreet'}; System.debug(CanTheUser.bulkFLSUpdatable('Account', fields)); calculateFLS(objType) Calculates the FLS for a given object type Signature private static Map<String, Map<FLSType, Boolean>> calculateFLS(\t\tString objType\t) Parameters objType Type: \t\tString String name of the object type Returns Map<String, Map<FLSType, Boolean>> create(obj) convenience api for determining if the running user can create the specified object Signature public static Boolean create(SObject obj) Parameters obj Type: SObject Object type to check create permissions on Returns Boolean Example System.debug(CanTheUser.create(new Account())); create(objs) convenience api for determining if the running user can create the specified object Signature public static Boolean create(List<SObject> objs) Parameters objs Type: List<SObject> list of objects. Only the first will be checked.(logically, a list is of uniform type and, and if the user can create one) Returns Boolean create(objName) convenience api for determining if the running user can create the specified object Signature public static Boolean create(String objName) Parameters String Object type to check create permissions on Returns Boolean Example System.debug(CanTheUser.create('Account')); crud(obj, permission) Signature @testVisible private static Boolean crud(SObject obj, CrudType permission) Parameters obj Type: SObject the object type to check permission Type: CrudType create, read, update or delete Returns Boolean Example System.debug(CanTheUser.crud(new Account(), CanTheUser.CrudType.READABLE)); crud(objs, permission) Signature @testVisible private static Boolean crud(List<SObject> objs, CrudType permission) crud(objectName, permission) Signature @testVisible private static Boolean crud(String objectName, CrudType permission) destroy(obj) convenience api for determining if the running user can delete/destroy the specified object Signature public static Boolean destroy(SObject obj) Parameters obj Type: SObject object type to check destroy permissions on Returns Boolean Example System.debug(CanTheUser.destroy(new Account())); destroy(objs) convenience api for determining if the running user can delete the specified object Signature public static Boolean destroy(List<SObject> objs) Parameters String Object type to check delete permissions on Returns Boolean destroy(objName) convenience api for determining if the running user can delete the specified object Signature public static Boolean destroy(String objName) Parameters String Object type to check create permissions on Returns Boolean Example System.debug(CanTheUser.destroy('Account')); edit(obj) convenience api for determining if the running user can edit / update the specified object Signature public static Boolean edit(SObject obj) Parameters obj Type: SObject object type to check edit permissions on Returns Boolean Example System.debug(CanTheUser.edit(new Account())); edit(objs) convenience api for determining if the running user can edit / update the specified objects Signature public static Boolean edit(List<SObject> objs) Parameters obj object type to check edit permissions on Returns Boolean edit(objName) convenience api for determining if the running user can edit the specified object Signature public static Boolean edit(String objName) Parameters String Object type to check edit permissions on Returns Boolean Example System.debug(CanTheUser.edit('Account')); flsAccessible(obj, field) public static method to determine if a given field on a given object is Accessible(readable) Signature public static Boolean flsAccessible(String obj, String field) Parameters obj Type: String the object in question, in string form field Type: String the field in question in SObjectField form Returns Boolean Example System.debug(CanTheUser.flsAccessible('Account', 'Name')); flsUpdatable(obj, field) public static method to determine if a given field on a given object is Updatable. Signature public static Boolean flsUpdatable(String obj, String field) Parameters obj Type: String the string version of an object name field Type: String the field to check Returns Boolean Example System.debug(CanTheUser.flsUpdatable('Account', 'Name')); getFLSForFieldOnObject(obj, field, checkType) Abstracted method for retrieving or calculating(memoization) of the FLS for a given field on a given object. Signature private static Boolean getFLSForFieldOnObject(\t\tString obj,\t\tString field,\t\tFLSType checkType\t) Parameters obj Type: \t\tString String version of object name to check field     String version of the field to check checkType Enum of Accessible or Updatable. Returns Boolean read(obj) convenience api for determining if the running user can read / access the specified object Signature public static Boolean read(SObject obj) Parameters obj Type: SObject object type to check read permissions on Returns Boolean Example System.debug(CanTheUser.read(new Account())); read(objs) convenience api for determining if the running user can read / access the specified objects Signature public static Boolean read(List<SObject> objs) Parameters obj object type to check read permissions on Returns Boolean read(objName) convenience api for determining if the running user can read the specified object Signature public static Boolean read(String objName) Parameters String Object type to check read permissions on Returns Boolean Example System.debug(CanTheUser.read('Account')); ups(obj) convenience api for determining if the running user can upsert(insert and update) the specified objects Signature public static Boolean ups(SObject obj) Parameters obj Type: SObject object type to check edit permissions on Returns Boolean Example System.debug(CanTheUser.ups(new Account())); ups(objs) convenience api for determining if the running user can edit / update the specified objects Signature public static Boolean ups(List<SObject> objs) Parameters obj object type to check upsert permissions on Returns Boolean ups(objName) convenience api for determining if the running user can upsert the specified object Signature public static Boolean ups(String objName) Parameters String Object type to check upsert permissions on Returns Boolean Example System.debug(CanTheUser.ups('Account'));"
    },
    {
        "title": "CrudType",
        "fileName": "CrudType.html",
        "text": "CrudType Signature public enum CrudType Values CREATEABLE READABLE EDITABLE DELETABLE UPSERTABLE"
    },
    {
        "title": "FLSType",
        "fileName": "FLSType.html",
        "text": "FLSType Signature public enum FLSType Values ACCESSIBLE UPDATABLE"
    },
    {
        "title": "Safely",
        "fileName": "Safely.html",
        "text": "Safely Class wraps DML Calls in FLS / Crud checks. Signature public with sharing class Safely Safely Properties Name Signature Annotations allOrNothing private Boolean allOrNothing @testVisible throwIfRemovedFields private Boolean throwIfRemovedFields @testVisible Safely Methods allOrNothing() doDelete(records) doDelete(record) doDML(accessType, records) doInsert(records) doInsert(record) doQuery(query) doUpdate(records) doUpdate(record) doUpsert(records) doUpsert(record) guardAgainstRemovedFields(accessType, records) throwIfRemovedFields() allOrNothing() Signature public Safely allOrNothing() doDelete(records) Signature public List<Database.DeleteResult> doDelete(List<SObject> records) doDelete(record) Signature public List<Database.DeleteResult> doDelete(SObject record) doDML(accessType, records) Signature private List<Database.SaveResult> doDML(\t\tSystem.AccessType accessType,\t\tList<SObject> records\t) doInsert(records) Signature public List<Database.SaveResult> doInsert(List<SObject> records) doInsert(record) Signature public List<Database.SaveResult> doInsert(SObject record) doQuery(query) Signature public List<SObject> doQuery(String query) doUpdate(records) Signature public List<Database.SaveResult> doUpdate(List<SObject> records) doUpdate(record) Signature public List<Database.SaveResult> doUpdate(SObject record) doUpsert(records) Signature public List<Database.UpsertResult> doUpsert(List<SObject> records) doUpsert(record) Signature public List<Database.UpsertResult> doUpsert(Sobject record) guardAgainstRemovedFields(accessType, records) Signature private SObjectAccessDecision guardAgainstRemovedFields(\t\tSystem.AccessType accessType,\t\tList<SObject> records\t) throwIfRemovedFields() Signature public Safely throwIfRemovedFields() Safely.RemovedFieldsException Signature public class RemovedFieldsException extends Exception"
    },
    {
        "title": "CanTheUserTests",
        "fileName": "CanTheUserTests.html",
        "text": "CanTheUserTests Signature @IsTest private class CanTheUserTests CanTheUserTests Methods canCrudAccountCreatePositive() canCrudAccountDeletePositive() canCrudAccountReadPositive() canCrudAccountUpdatePositive() canCrudCreateAccountPositive() canCrudDestroyAccountPositive() canCrudEditAccountPositive() canCrudReadAccountPositive() canCrudUpsertAccountPositive() generateAccounts() getBulkFLSAccessibleWithAccountPositive() getBulkFLSAccessibleWithAccountPositiveWithNegativeResults() getBulkFLSUpdatableWithAccountPositive() getBulkFLSUpdatableWithAccountPositiveWithNegativeResults() getFLSofAccountIDNegative() getFLSofAccountNamePositive() canCrudAccountCreatePositive() Signature @IsTest private static void canCrudAccountCreatePositive() canCrudAccountDeletePositive() Signature @IsTest private static void canCrudAccountDeletePositive() canCrudAccountReadPositive() Signature @IsTest private static void canCrudAccountReadPositive() canCrudAccountUpdatePositive() Signature @IsTest private static void canCrudAccountUpdatePositive() canCrudCreateAccountPositive() Signature @IsTest private static void canCrudCreateAccountPositive() canCrudDestroyAccountPositive() Signature @IsTest private static void canCrudDestroyAccountPositive() canCrudEditAccountPositive() Signature @IsTest private static void canCrudEditAccountPositive() canCrudReadAccountPositive() Signature @IsTest private static void canCrudReadAccountPositive() canCrudUpsertAccountPositive() Signature @IsTest private static void canCrudUpsertAccountPositive() generateAccounts() Signature private static List<Account> generateAccounts() getBulkFLSAccessibleWithAccountPositive() Signature @IsTest private static void getBulkFLSAccessibleWithAccountPositive() getBulkFLSAccessibleWithAccountPositiveWithNegativeResults() Signature @IsTest private static void getBulkFLSAccessibleWithAccountPositiveWithNegativeResults() getBulkFLSUpdatableWithAccountPositive() Signature @IsTest private static void getBulkFLSUpdatableWithAccountPositive() getBulkFLSUpdatableWithAccountPositiveWithNegativeResults() Signature @IsTest private static void getBulkFLSUpdatableWithAccountPositiveWithNegativeResults() getFLSofAccountIDNegative() Signature @IsTest private static void getFLSofAccountIDNegative() getFLSofAccountNamePositive() Signature @IsTest private static void getFLSofAccountNamePositive()"
    },
    {
        "title": "SafelyTests",
        "fileName": "SafelyTests.html",
        "text": "SafelyTests Signature @isTest private class SafelyTests SafelyTests Methods emptyCollections() testConstructorChains() testDeleteWithRegularProfileNegative() testDeleteWithRegularProfilePositive() testDoInsertMethodsNoThrowPositive() testDoInsertNegative() testDoQueryPositive() testDoQueryThrowsRemovedFieldsException() testDoUpdateMethodsNoThrowPositive() testDoUpdateNegative() testDoUpsertMethodsNegative() testDoUpsertMethodsNoThrowPositive() testMarketingProfileDeleteNegative() testMarketingProfileGeneratesInsertExceptionPositive() testMarketingProfileGeneratesUpdateExceptionPositive() testMarketingProfileGeneratesUpsertExceptionPositive() emptyCollections() Signature @IsTest private static void emptyCollections() testConstructorChains() Signature @IsTest private static void testConstructorChains() testDeleteWithRegularProfileNegative() Signature @IsTest private static void testDeleteWithRegularProfileNegative() testDeleteWithRegularProfilePositive() Signature @IsTest private static void testDeleteWithRegularProfilePositive() testDoInsertMethodsNoThrowPositive() Signature @IsTest private static void testDoInsertMethodsNoThrowPositive() testDoInsertNegative() Signature @IsTest private static void testDoInsertNegative() testDoQueryPositive() Signature @IsTest private static void testDoQueryPositive() testDoQueryThrowsRemovedFieldsException() Signature @IsTest private static void testDoQueryThrowsRemovedFieldsException() testDoUpdateMethodsNoThrowPositive() Signature @IsTest private static void testDoUpdateMethodsNoThrowPositive() testDoUpdateNegative() Signature @IsTest private static void testDoUpdateNegative() testDoUpsertMethodsNegative() Signature @IsTest private static void testDoUpsertMethodsNegative() testDoUpsertMethodsNoThrowPositive() Signature @IsTest private static void testDoUpsertMethodsNoThrowPositive() testMarketingProfileDeleteNegative() Signature @IsTest private static void testMarketingProfileDeleteNegative() testMarketingProfileGeneratesInsertExceptionPositive() Signature @IsTest private static void testMarketingProfileGeneratesInsertExceptionPositive() testMarketingProfileGeneratesUpdateExceptionPositive() Signature @IsTest private static void testMarketingProfileGeneratesUpdateExceptionPositive() testMarketingProfileGeneratesUpsertExceptionPositive() Signature @IsTest private static void testMarketingProfileGeneratesUpsertExceptionPositive()"
    },
    {
        "title": "HttpCalloutMockFactory",
        "fileName": "HttpCalloutMockFactory.html",
        "text": "HttpCalloutMockFactory Signature @isTest public class HttpCalloutMockFactory implements HttpCalloutMock HttpCalloutMockFactory Properties Name Signature orderedResponses protected List<HttpResponse> orderedResponses HttpCalloutMockFactory Constructors HttpCalloutMockFactory(code, status, bodyAsString, headers) This constructor builds the response that will be returned HttpCalloutMockFactory(orderedResponses) This constructor accepts a list of responses to be returned. HttpCalloutMockFactory(code, status, bodyAsString, headers) This constructor builds the response that will be returned Signature public HttpCalloutMockFactory(\t\tInteger code,\t\tString status,\t\tString bodyAsString,\t\tMap<String, String> headers\t) Parameters code Type: \t\tInteger HTTP status code(200, 201, 301, 302, 400, 404, 503, etc) status HTTP text status. ie: \"ok\" for 200 bodyAsString This is the string that will be returned as the body headers Type: String> a map of headers applied to the response object HttpCalloutMockFactory(orderedResponses) This constructor accepts a list of responses to be returned. Signature public HttpCalloutMockFactory(List<HttpResponse> orderedResponses) Parameters orderedResponses Type: List<HttpResponse> HTTP status code(200, 201, 301, 302, 400, 404, 503, etc) HttpCalloutMockFactory Methods generateHttpResponse(code, status, bodyAsString, headers) Required method for the HttpCalloutMock interface respond(req) setMock can only be called once per test so to enable mocking multiple callouts, this response method removes the first item on the list of callouts, and returns that. additional callouts will respond with the next items from the list. generateHttpResponse(code, status, bodyAsString, headers) Required method for the HttpCalloutMock interface Signature public static HttpResponse generateHttpResponse(\t\tInteger code,\t\tString status,\t\tString bodyAsString,\t\tMap<String, String> headers\t) Parameters code Type: \t\tInteger Integer to return as the status code - 200, 301, 404 etc. status       String to return for the status: 'OK' or 'Server Error' bodyAsString String to return as the body headers Type: String> Map<String,String> of headers to return Returns HttpResponse respond(req) setMock can only be called once per test so to enable mocking multiple callouts, this response method removes the first item on the list of callouts, and returns that. additional callouts will respond with the next items from the list. Signature public HttpResponse respond(HttpRequest req) Parameters req Type: HttpRequest dependency injected by the system Returns HttpResponse"
    },
    {
        "title": "IdFactory",
        "fileName": "IdFactory.html",
        "text": "IdFactory A factory class for generating bogus Ids for testing purposes. Signature public with sharing class IdFactory IdFactory Properties Name Signature Description DEFAULT_ID_LENGTH private static final Integer DEFAULT_ID_LENGTH Integer representing the length of the Id. Default is 18. idiosyncrasy private static Integer idiosyncrasy Integer to be appended to the end of the Id. Incremented each time a new Id is generated. SERVER_ID private static final String SERVER_ID This property gives us an authentic ID for this org which we can use to grab the Instance ID according to the latest release notes: What constitutes a valid Salesforce Object ID is being redefined as Salesforce expands out the instance ID(also known as a pod identifier or server ID). The 4th, 5th, and 6th characters would be used for server ID. The 7th character still remains reserved. Any coded assumptions about the structure of a valid or invalid ID should be reevaluated going forward. Note: Existing Apex functionality around IDs will transition to the new format. UNSTABLE_TYPE_PREFIX_OVERRIDES private static final Map<String, String> UNSTABLE_TYPE_PREFIX_OVERRIDES There are certain types of objects that do not return a prefix. This map contains string keys that map to known values for these 'unstable' types. This map is used to identify the correct prefix when a developer requests an Id for an unstable type. This is likely an incomplete list. If you find an unstable type that is not in this list, please add it, and submit a PR. Daniel Ballinger has a great blog post useful for filling in the gaps when an object doesn't return a prefix. http://www.fishofprey.com/2011/09/obscure-salesforce-object-key-prefixes.html IdFactory Methods get(objectType) this method accepts a String representation of the sObject type and defers to it's sister methods to generate a bogus Id. get(incomingType) This method accepts a Type object and defers to it's sister methods to generate a bogus Id. get(incomingType) This method accepts a generic SObject and defers to it's sister methods to generate a bogus Id. get(incomingType) All the other methods in this class defer to this method eventually to generate a bogus Id. getUnstableObjectPrefix(objectType) getWithPrefixOverride(prefix) get(objectType) this method accepts a String representation of the sObject type and defers to it's sister methods to generate a bogus Id. Signature public static Id get(String objectType) Parameters objectType Type: String String representation of the sObject type ie: Account, Contact, etc. Returns id a plausible, but bogus Id Example `IdFactory.get('Account');` get(incomingType) This method accepts a Type object and defers to it's sister methods to generate a bogus Id. Signature public static Id get(Type incomingType) Parameters incomingType Type: Type Type object representing the sObject type ie: Account, Contact, etc. Returns Id a plausible, but bogus Id Example `IdFactory.get(Type.forName('Account'));` get(incomingType) This method accepts a generic SObject and defers to it's sister methods to generate a bogus Id. Signature public static Id get(SObject incomingType) Parameters incomingType Type: SObject SObject representing the sObject type ie: Account, Contact, etc. Returns Id a plausible, but bogus Id get(incomingType) All the other methods in this class defer to this method eventually to generate a bogus Id. Signature public static Id get(Schema.SObjectType incomingType) Parameters incomingType Type: Schema.SObjectType Schema.SObjectType representing the sObject type ie: Account, Contact, etc. Returns Id a plausible, but bogus Id getUnstableObjectPrefix(objectType) Signature private static String getUnstableObjectPrefix(String objectType) getWithPrefixOverride(prefix) Signature private static Id getWithPrefixOverride(String prefix) IdFactory.IDFactoryException Signature public class IDFactoryException extends Exception"
    },
    {
        "title": "MethodSignature",
        "fileName": "MethodSignature.html",
        "text": "MethodSignature Class models a callable apex method's 'signature' or combination of Name, Parameter types and Parameter values. This is separate from a MockedMethod, because it can be constructed at runtime for comparison against established MockedMethods. Signature public with sharing class MethodSignature MethodSignature Properties Name Signature Annotations methodName private String methodName @testVisible methodParameterTypes private List<Type> methodParameterTypes @testVisible MethodSignature Constructors MethodSignature(methodName, paramTypes) Constructor requiring a method name and list of parameters. This method cannot be constructed without these. MethodSignature(methodName, paramTypes) Constructor requiring a method name and list of parameters. This method cannot be constructed without these. Signature public MethodSignature(String methodName, List<Type> paramTypes) Parameters methodName Type: String paramTypes Type: List<Type> MethodSignature Methods buildMockedMethod() Creates the MockedMethod matching this method signature. finalizeSignature() Called at the end of building a method signature. getMethodName() verifyMethodNamesMatch(originalMethodName, comparitorMethodName) Returns true if the current MethodSignature's methodName is a case insensitive match to the comparison's methodName verifySignatureMatch(otherSignature) This is used to compare the signature of a MockedMethod, against another instance. Used at runtime to compare an actually requested method call against pre-defined mocks. withParameterTypes(parameters) This variant handles the situation where a mocked method was called without parameters. withParameterTypes(paramater) This variant handles a single parameter, brokers to omnibus method. withParameterTypes(parameter, parameter2) Two parameter variant. Brokers to omnibus method. withParameterTypes(parameter, parameter2, parameter3) Three parameter variant. Brokers to omnibus method. withParameterTypes(parameter, parameter2, parameter3, parameter4) Four parameter variant. Brokers to omnibus method. buildMockedMethod() Creates the MockedMethod matching this method signature. Signature public List<MockedMethod> buildMockedMethod() Returns List<MockedMethod> finalizeSignature() Called at the end of building a method signature. Signature public Stub.Builder finalizeSignature() Returns Stub.Builder getMethodName() Signature public String getMethodName() verifyMethodNamesMatch(originalMethodName, comparitorMethodName) Returns true if the current MethodSignature's methodName is a case insensitive match to the comparison's methodName Signature private Boolean verifyMethodNamesMatch(\t\tString originalMethodName,\t\tString comparitorMethodName\t) Parameters originalMethodName Type: \t\tString comparitorMethodName Returns Boolean verifySignatureMatch(otherSignature) This is used to compare the signature of a MockedMethod, against another instance. Used at runtime to compare an actually requested method call against pre-defined mocks. Signature public Boolean verifySignatureMatch(MethodSignature otherSignature) Parameters otherInstance Returns Boolean withParameterTypes(parameters) This variant handles the situation where a mocked method was called without parameters. Signature public MockedMethod.Builder withParameterTypes(\t\t\tList<System.Type> parameters\t\t) Returns MockedMethod.Builder withParameterTypes(paramater) This variant handles a single parameter, brokers to omnibus method. Signature public MockedMethod.Builder withParameterTypes(System.Type paramater) Parameters parameter Returns MockedMethod.Builder withParameterTypes(parameter, parameter2) Two parameter variant. Brokers to omnibus method. Signature public MockedMethod.Builder withParameterTypes(\t\t\tSystem.Type parameter,\t\t\tSystem.Type parameter2\t\t) Parameters parameter Type: \t\t\tSystem.Type parameter2 Returns MockedMethod.Builder withParameterTypes(parameter, parameter2, parameter3) Three parameter variant. Brokers to omnibus method. Signature public MockedMethod.Builder withParameterTypes(\t\t\tSystem.Type parameter,\t\t\tSystem.Type parameter2,\t\t\tSystem.Type parameter3\t\t) Parameters parameter Type: \t\t\tSystem.Type parameter2 parameter3 Returns MockedMethod.Builder withParameterTypes(parameter, parameter2, parameter3, parameter4) Four parameter variant. Brokers to omnibus method. Signature public MockedMethod.Builder withParameterTypes(\t\t\tSystem.Type parameter,\t\t\tSystem.Type parameter2,\t\t\tSystem.Type parameter3,\t\t\tSystem.Type parameter4\t\t) Parameters parameter Type: \t\t\tSystem.Type parameter2 parameter3 parameter4 Returns MockedMethod.Builder MethodSignature.Builder While a MethodSignature object can be created directly the more common usecase is to use this Builder class to construct the MethodSignature object in a Fluent api style. Signature public class Builder MethodSignature.Builder Properties Name Signature Annotations methodName private String methodName @testVisible parameterTypes public List<Type> parameterTypes @testVisible stubBuilder private Stub.Builder stubBuilder MethodSignature.Builder Constructors Builder(builder, methodName, paramTypes) Constructor. Builder(builder, methodName, paramTypes) Constructor. Signature public Builder(\t\t\tStub.Builder builder,\t\t\tString methodName,\t\t\tList<System.Type> paramTypes\t\t) Parameters builder Type: \t\t\tStub.Builder A Stub.Builder object methodName String referencing the name of the method minus things like() paramTypes A list of System.Types that define the order and type of parameters for the method."
    },
    {
        "title": "MockedMethod",
        "fileName": "MockedMethod.html",
        "text": "MockedMethod Represents a method call that is mocked as part of a Stub object. This class is marked @isTest, as the object and it's methods are not useful outside of a Test context. This file contains not only the MockedMethod class, but an inner Builder class. It is expected most developers will utilize the Builder class to construct instances of MockedMethod. Signature public with sharing class MockedMethod MockedMethod Properties Name Signature Annotations Description countOfMethodInvocations private Integer countOfMethodInvocations customException private Exception customException exceptionMessage private static String exceptionMessage @testVisible expectedParameters private List<Object> expectedParameters methodSignature private MethodSignature methodSignature @testVisible Every MockedMethod has a methodSignature defining it's 'signature' or combination of name, parameter names and parameter types. returnValue private Object returnValue sObjectIds private List<Id> sObjectIds throwException private Boolean throwException MockedMethod Constructors MockedMethod(methodSignature) Constructor requiring a method signature. This is used to prevent constructing MockedMethods without a signature. MockedMethod(methodSignature) Constructor requiring a method signature. This is used to prevent constructing MockedMethods without a signature. Signature public MockedMethod(MethodSignature methodSignature) Parameters methodSignature Type: MethodSignature We need this to define the shape of the method being mocked. MockedMethod Methods assertMockedMethodWasCalled() If this MockedMethod has not been called cause a failing assertion. doMethodSignaturesAndParametersMatch(methodSignature, runtimeParameters) determines if the current method call matches on both a method signature level and against specified input parameters. doRuntimeParametersMatch(compareTo) Determines if the method, as brokered by the stub object is being called with an expected set of parameters. Note: I thought I could replace this with return this.methodParamsAtExecutionTime.equals(compareTo);  but this doesn't work, and to be honest, I'm still investigating why. handleCall() This method is invoked by it's parent stub object, and is responsible for returning the mocked value. returning(returnValue) Sets this MockedMethod's return value. This is the value that will be returned by this mocked method when the stub calls a method that has an identical name, signature and input paramter list. returning(incomingIds) Use this variant of returning when you want the mocked method to return a list of sObjects(generic) with a specific set of IDs throwingException() Use this method when you need the mocked method to throw an exception. Incredibly useful for testing exception handling! Note: This variant results in a generic StubException being thrown. throwingException(customException) Use this variant to have this mocked method return a developer-specified exception object. Useful for testing exception handling with specific exception types. withParameterValues(args) Allows developers to define expected input parameters at execution time. This enables developers to mock the same method call N number of times, with different input parameters. assertMockedMethodWasCalled() If this MockedMethod has not been called cause a failing assertion. Signature @SuppressWarnings('pmd.ApexUnitTestMethodShouldHaveIsTestAnnotation') public void assertMockedMethodWasCalled() doMethodSignaturesAndParametersMatch(methodSignature, runtimeParameters) determines if the current method call matches on both a method signature level and against specified input parameters. Signature public Boolean doMethodSignaturesAndParametersMatch(\t\tMethodSignature methodSignature,\t\tList<Object> runtimeParameters\t) Parameters methodSignature Type: \t\tMethodSignature A method signature to match against. runtimeParameters a List of objects representing the actual values - at runtime - of the method call. Returns Boolean doRuntimeParametersMatch(compareTo) Determines if the method, as brokered by the stub object is being called with an expected set of parameters. Note: I thought I could replace this with return this.methodParamsAtExecutionTime.equals(compareTo);  but this doesn't work, and to be honest, I'm still investigating why. Signature private Boolean doRuntimeParametersMatch(List<Object> compareTo) Parameters compareTo Type: List<Object> Returns Boolean handleCall() This method is invoked by it's parent stub object, and is responsible for returning the mocked value. Signature public Object handleCall() Returns Object returning(returnValue) Sets this MockedMethod's return value. This is the value that will be returned by this mocked method when the stub calls a method that has an identical name, signature and input paramter list. Signature public MockedMethod returning(Object returnValue) Parameters returnValue Type: Object This is the object you want returned. Returns MockedMethod returning(incomingIds) Use this variant of returning when you want the mocked method to return a list of sObjects(generic) with a specific set of IDs Signature public MockedMethod returning(List<Id> incomingIds) Parameters incomingIds Type: List<Id> A list of ID's. Note, they don't have to be ids of the same sObject type. Order is preserved. Returns MockedMethod throwingException() Use this method when you need the mocked method to throw an exception. Incredibly useful for testing exception handling! Note: This variant results in a generic StubException being thrown. Signature public MockedMethod throwingException() Returns MockedMethod throwingException(customException) Use this variant to have this mocked method return a developer-specified exception object. Useful for testing exception handling with specific exception types. Signature public MockedMethod throwingException(Exception customException) Parameters customException Type: Exception Returns MockedMethod withParameterValues(args) Allows developers to define expected input parameters at execution time. This enables developers to mock the same method call N number of times, with different input parameters. Signature public MockedMethod withParameterValues(List<Object> args) Parameters args Type: List<Object> A list of Objects that you want to this MockedMethod to to respond to. These objects must exactly match what your code invokes in order for your stub to return the specified mock output. Returns MockedMethod MockedMethod.Builder class provides a 'builder' or fluent interface for constructing MockedMethod objects. While the end-developer can create MockedMethod objects directly, the point of this class is to provide an intuitive and easy-to-use/comprehend interface for building nuanced MockedMethod Objects. Signature public class Builder MockedMethod.Builder Properties Name Signature customException private Exception customException methodSignatureBuilder private MethodSignature.Builder methodSignatureBuilder returnSObjectIds private List<Id> returnSObjectIds returnValue private Object returnValue runtimeParameters private List<Object> runtimeParameters throwException private Boolean throwException MockedMethod.Builder Constructors Builder(methodSignatureBuilder, args) Constructor requiring a methodSignatureBuilder object and a list of runtime arguments Builder(methodSignatureBuilder, args) Constructor requiring a methodSignatureBuilder object and a list of runtime arguments Signature public Builder(\t\t\tMethodSignature.Builder methodSignatureBuilder,\t\t\tList<System.Type> args\t\t) Parameters methodSignatureBuilder Type: \t\t\tMethodSignature.Builder args MockedMethod.Builder Methods createMockedMethod(signature) Responsible for returning a fully formed MockedMethod instance. returning(returnValue) This variant allows developers to specify the object that will be returned when this mocked method is executed by its parent stub. returning() This variant allows developers to specify a void return. returningObjectsWithIds(ids) This variant allows developers to specify a list of IDs to be assigned to the returning sObject List setParameterValues(parameters) internal method used to set the parameter values of this MockedMethod instance. throwingException() This variant allows developers to throw an internally generated Stub.StubException object when the method is executed. throwingException(customException) Use this variant to have this mocked method return a developer-specified exception object. Useful for testing exception handling with specific exception types. Note: This only works for custom exceptions. Note: Developers construct your exception  like this: <CustomExceptioType> customException =   new <CustomExceptionType>('message'); withParameterValues(parameter) convenience methodfor setting a single parameter type withParameterValues(parameter, parameter2) convenience methodfor setting two params withParameterValues(parameter, parameter2, parameter3) convenience methodfor setting three params withParameterValues(parameter, parameter2, parameter3, parameter4) convenience methodfor setting four parameters createMockedMethod(signature) Responsible for returning a fully formed MockedMethod instance. Signature public MockedMethod createMockedMethod(MethodSignature signature) Parameters signature Type: MethodSignature Returns MockedMethod returning(returnValue) This variant allows developers to specify the object that will be returned when this mocked method is executed by its parent stub. Signature public Stub.Builder returning(Object returnValue) Parameters returnValue Type: Object Returns Stub.Builder returning() This variant allows developers to specify a void return. Signature public Stub.Builder returning() Returns Stub.Builder returningObjectsWithIds(ids) This variant allows developers to specify a list of IDs to be assigned to the returning sObject List Signature public Stub.Builder returningObjectsWithIds(List<Id> ids) Parameters ids Type: List<Id> The list of Ids to assign. Returns MockedMethod.Builder setParameterValues(parameters) internal method used to set the parameter values of this MockedMethod instance. Signature private MockedMethod.Builder setParameterValues(\t\t\tList<Object> parameters\t\t) Parameters parameters Type: \t\t\tList<Object> list of System.Type Returns MockedMethod throwingException() This variant allows developers to throw an internally generated Stub.StubException object when the method is executed. Signature public Stub.Builder throwingException() Returns Stub.Builder throwingException(customException) Use this variant to have this mocked method return a developer-specified exception object. Useful for testing exception handling with specific exception types. Note: This only works for custom exceptions. Note: Developers construct your exception  like this: <CustomExceptioType> customException =   new <CustomExceptionType>('message'); Signature public Stub.Builder throwingException(Exception customException) Parameters customException Type: Exception Returns MockedMethod withParameterValues(parameter) convenience methodfor setting a single parameter type Signature public MockedMethod.Builder withParameterValues(Object parameter) Parameters parameter Type: Object System.Type Returns this withParameterValues(parameter, parameter2) convenience methodfor setting two params Signature public MockedMethod.Builder withParameterValues(\t\t\tObject parameter,\t\t\tObject parameter2\t\t) Parameters parameter Type: \t\t\tObject System.Type parameter2 System.Type Returns this withParameterValues(parameter, parameter2, parameter3) convenience methodfor setting three params Signature public MockedMethod.Builder withParameterValues(\t\t\tObject parameter,\t\t\tObject parameter2,\t\t\tObject parameter3\t\t) Parameters parameter Type: \t\t\tObject System.Type parameter2 System.Type parameter3 System.Type Returns return description withParameterValues(parameter, parameter2, parameter3, parameter4) convenience methodfor setting four parameters Signature public MockedMethod.Builder withParameterValues(\t\t\tObject parameter,\t\t\tObject parameter2,\t\t\tObject parameter3,\t\t\tObject parameter4\t\t) Parameters parameter Type: \t\t\tObject parameter description parameter2 parameter2 description parameter3 parameter3 description parameter4 parameter4 description Returns this"
    },
    {
        "title": "Stub",
        "fileName": "Stub.html",
        "text": "Stub This class helps you construct and manage StubProvider conforming objects for use in Unit Tests. It, along with it's companion classes: * MockedMethod * MethodSignature and their builder-pattern inner classes are designed to work together with a fluent API style like this:  `apex StubObject fooStub = new StubObject.Builder('foo.class') .mockingMethodCall('someMethodName', List<Object> Params) .withParameterTypes() .returning() || .throwingException() || .throwingException(ExceptionObj) .mockingMethodCall('secondMethodName', ...) .withParameterTypes() .returning() || .throwingException() || .throwingException(ExceptionObj) .createStub()  ` Signature public with sharing class Stub implements System.StubProvider Stub Properties Name Signature Annotations mockedMethods private List<MockedMethod> mockedMethods @testVisible objectType private final Type objectType Stub Constructors Stub(objectType) required constructor finalizing the object type. Stub(objectType, mockedMethods) convenience construtor that accepts a pre-built list of MockedMethod objects. Stub() Stub(objectType) required constructor finalizing the object type. Signature public Stub(Type objectType) Parameters objectType Type: Type Type class: ie: Foo.class Stub(objectType, mockedMethods) convenience construtor that accepts a pre-built list of MockedMethod objects. Signature public Stub(Type objectType, List<MockedMethod> mockedMethods) Parameters objectType Type: Type type class: ie. Foo.class mockedMethods Type: List<MockedMethod> List of MockedMethod objects Stub() Signature return new Stub(objectType, mockedMethods) Stub Methods assertAllMockedMethodsWereCalled() Useful for asserting the methods you mocked were, in fact, called. It does this by invoking the assertMockedMethodWasCalled on each individual mocked method. createStub() returns the this constructed class with it's mocked methods as a single stub object to be used in a unit test. defineStub(generateInjectableStub) Generates a Stub object from this builder object. defineStub() handleMethodCall(obj, methodName, returnType, paramTypes, paramNames, args) method required by the StubProvider interface. Handles the mock execution of the given method call. mockingMethodCall(methodName, paramTypes) This method, and it's overloaded variants below, all work to add a new MockedMethod to the stub object. Semantically the idea is that you'll invoke one of these 'mockingMethodCall' methods for every method you want your stub to react to. Because this builder class is designed around method chaining, you can invoke a number of these in a row. See the example invocation at the top of this class. mockingMethodCall(methodName) Overloaded variant of the main 'mockingMethodCall' method. See docs for the first instance of mockingMethodCall in this class. mockingMethodCall(methodName, paramType) Overloaded variant of the main 'mockingMethodCall' method. See docs for the first instance of mockingMethodCall in this class. mockingMethodCall(methodName, paramType, paramType2) Overloaded variant of the main 'mockingMethodCall' method. See docs for the first instance of mockingMethodCall in this class. mockingMethodCall(methodName, paramType, paramType2, paramType3) Overloaded variant of the main 'mockingMethodCall' method. See docs for the first instance of mockingMethodCall in this class. mockingMethodCall(methodName, paramType, paramType2, paramType3, paramType4) Overloaded variant of the main 'mockingMethodCall' method. See docs for the first instance of mockingMethodCall in this class. assertAllMockedMethodsWereCalled() Useful for asserting the methods you mocked were, in fact, called. It does this by invoking the assertMockedMethodWasCalled on each individual mocked method. Signature public void assertAllMockedMethodsWereCalled() createStub() returns the this constructed class with it's mocked methods as a single stub object to be used in a unit test. Signature public Object createStub() Returns Object  Needs to be cast back to the type of object used. defineStub(generateInjectableStub) Generates a Stub object from this builder object. Signature public Object defineStub(Boolean generateInjectableStub) Parameters If true, calls the stub objects' createStub method automatically Returns Stub defineStub() Signature public Stub defineStub() handleMethodCall(obj, methodName, returnType, paramTypes, paramNames, args) method required by the StubProvider interface. Handles the mock execution of the given method call. Signature public Object handleMethodCall(\t\tObject obj,\t\tString methodName,\t\tType returnType,\t\tList<Type> paramTypes,\t\tList<String> paramNames,\t\tList<Object> args\t) Parameters obj Type: \t\tObject dependency injected by Apex, object the mock method was call upon methodName dependency injected by Apex, string representation of the name of the method used to construct a MethodSignature object for comparison. returnType dependency injected by Apex, not currently used. paramTypes dependency injected by Apex, list of parameter types used to construct a MethodSignature object for comparison. paramNames dependency injected by Apex, not currently used. args       dependency injected by Apex, not currently used. Returns Object mockingMethodCall(methodName, paramTypes) This method, and it's overloaded variants below, all work to add a new MockedMethod to the stub object. Semantically the idea is that you'll invoke one of these 'mockingMethodCall' methods for every method you want your stub to react to. Because this builder class is designed around method chaining, you can invoke a number of these in a row. See the example invocation at the top of this class. Signature public MethodSignature.Builder mockingMethodCall(\t\t\tString methodName,\t\t\tList<Type> paramTypes\t\t) Parameters methodName Type: \t\t\tString Required, name of the method that will be mocked paramTypes List of System.Types that the mocked method should respond to. Returns MethodSignature.Builder  - returns the builder object for chaining. mockingMethodCall(methodName) Overloaded variant of the main 'mockingMethodCall' method. See docs for the first instance of mockingMethodCall in this class. Signature public MethodSignature.Builder mockingMethodCall(String methodName) Parameters methodName Type: String Method name to be mocked. Returns MethodSignature.Builder mockingMethodCall(methodName, paramType) Overloaded variant of the main 'mockingMethodCall' method. See docs for the first instance of mockingMethodCall in this class. Signature public MockedMethod.Builder mockingMethodCall(\t\t\tString methodName,\t\t\tType paramType\t\t) Parameters methodName Type: \t\t\tString required. method name to be mocked. paramType  Type of single parameter. Returns MethodSignature.Builder mockingMethodCall(methodName, paramType, paramType2) Overloaded variant of the main 'mockingMethodCall' method. See docs for the first instance of mockingMethodCall in this class. Signature public MockedMethod.Builder mockingMethodCall(\t\t\tString methodName,\t\t\tType paramType,\t\t\tType paramType2\t\t) Parameters methodName Type: \t\t\tString required. method name to be mocked. paramType  param type 1. paramType2 param type 2. Returns MethodSignature.Builder mockingMethodCall(methodName, paramType, paramType2, paramType3) Overloaded variant of the main 'mockingMethodCall' method. See docs for the first instance of mockingMethodCall in this class. Signature public MockedMethod.Builder mockingMethodCall(\t\t\tString methodName,\t\t\tType paramType,\t\t\tType paramType2,\t\t\tType paramType3\t\t) Parameters methodName Type: \t\t\tString required. method name to be mocked. paramType  param type 1. paramType2 param type 2. paramType3 param type 3. Returns MethodSignature.Builder mockingMethodCall(methodName, paramType, paramType2, paramType3, paramType4) Overloaded variant of the main 'mockingMethodCall' method. See docs for the first instance of mockingMethodCall in this class. Signature public MockedMethod.Builder mockingMethodCall(\t\t\tString methodName,\t\t\tType paramType,\t\t\tType paramType2,\t\t\tType paramType3,\t\t\tType paramType4\t\t) Parameters methodName Type: \t\t\tString required. method name to be mocked. paramType  param type 1. paramType2 param type 2. paramType3 param type 3. paramType4 param type 4. Returns MethodSignature.Builder Stub.Builder Builder pattern for creating stubs with a fluent interface. Note, there are three 'Builder' classes, each an inner class of the object that the builder builds. In this case, this builder inner class is responsible for building Stub objects. While you can directly instantiate the Stub class, the idea is that you will actually use the Builder class/interface to create Stubs Signature public class Builder Stub.Builder Properties Name Signature Description objectType private Type objectType holds the System.Type reference for the object that you're building a stub for. Stub.Builder Constructors Builder(objType) Internally, we need to maintain a list of signature builder objects so that we can roll-up the creation of objects. Builder(objType) Internally, we need to maintain a list of signature builder objects so that we can roll-up the creation of objects. Signature public Builder(Type objType) Stub.StubException Class is used by Stub, MethodSignature and MockedMethod classes for throwing when an exception occurs that is specifically related to building, using or asserting against the Super Stub framework Signature public class StubException extends Exception"
    },
    {
        "title": "StubUtilities",
        "fileName": "StubUtilities.html",
        "text": "StubUtilities Signature @isTest public with sharing class StubUtilities StubUtilities Properties Name Signature Description counter private static Integer counter a static incrementing counter tied to transaction a new comment StubUtilities Methods generateSObjectIds(sObjectTypeString, size) Used when you want a MockedMethod to return a set of IDs of a given sObject Type generateSObjectIds(sObjectTypeString, size) Used when you want a MockedMethod to return a set of IDs of a given sObject Type Signature public static List<Id> generateSObjectIds(\t\tString sObjectTypeString,\t\tInteger size\t) Parameters sObjectTypeString Type: \t\tString Name of type: ie: Account  size              Number of valid Ids to return Returns List<Id>"
    },
    {
        "title": "TestFactory",
        "fileName": "TestFactory.html",
        "text": "TestFactory Signature @isTest public class TestFactory TestFactory Properties Name Signature Description nameFieldMap private static Map<Schema.SObjectType, Schema.SObjectField> nameFieldMap When we create a list of SObjects, we need to have a unique field for the insert if there isn't an autonumber field. Usually we use the Name field, but some objects don't have a name field. TestFactory Methods addFieldDefaults(sObj, defaults) Sets field defaults on the sObj given the map of defaults. createSObject(sObj) Creates a single sObject. createSObject(sObj, doInsert) Creates a single sObject createSObject(sObj, defaultClassName) creates a single sObject createSObject(sObj, defaultClassName, doInsert) Create a single sObject createSObjectList(sObj, numberOfObjects) Creates a list of sObjects createSObjectList(sObj, numberOfObjects, doInsert) Creates a list of sObjects createSObjectList(sObj, numberOfObjects, defaultClassName, doInsert) Creates a list of sObjects createSObjectList(sObj, numberOfObjects, defaultClassName) Creates a list of sObjects addFieldDefaults(sObj, defaults) Sets field defaults on the sObj given the map of defaults. Signature private static void addFieldDefaults(\t\tSObject sObj,\t\tMap<Schema.SObjectField, Object> defaults\t) Parameters sObj Type: \t\tSObject Obj to manipulate. defaults Type: Object> Defaults map of sObjectField to Object to use for values. createSObject(sObj) Creates a single sObject. Signature public static SObject createSObject(SObject sObj) Parameters sObj Type: SObject Type of sObject to create. Returns SObject createSObject(sObj, doInsert) Creates a single sObject Signature public static SObject createSObject(SObject sObj, Boolean doInsert) Parameters sObj Type: SObject Type of sObject to create doInsert Type: Boolean Boolean should this object be inserted? Returns SObject createSObject(sObj, defaultClassName) creates a single sObject Signature public static SObject createSObject(SObject sObj, String defaultClassName) Parameters sObj Type: SObject Type of sObject to create defaultClassName Type: String Name of the class to provide field defaults Returns SObject Exceptions TestFactoryException when defaultClassName param is not a valid type. createSObject(sObj, defaultClassName, doInsert) Create a single sObject Signature public static SObject createSObject(\t\tSObject sObj,\t\tString defaultClassName,\t\tBoolean doInsert\t) Parameters sObj Type: \t\tSObject Type of sObject to create defaultClassName String name of a class providing default values doInsert         Boolean should this method insert the created object? Returns SObject createSObjectList(sObj, numberOfObjects) Creates a list of sObjects Signature public static SObject[] createSObjectList(\t\tSObject sObj,\t\tInteger numberOfObjects\t) Parameters sObj Type: \t\tSObject Type of sObjects to create numberOfObjects Integer number of objects to create Returns SObject[] createSObjectList(sObj, numberOfObjects, doInsert) Creates a list of sObjects Signature public static SObject[] createSObjectList(\t\tSObject sObj,\t\tInteger numberOfObjects,\t\tBoolean doInsert\t) Parameters sObj Type: \t\tSObject Type of sObjects to create numberOfObjects Integer number of objects to create doInsert         Boolean should this method insert the created object? Returns SObject[] createSObjectList(sObj, numberOfObjects, defaultClassName, doInsert) Creates a list of sObjects Signature public static SObject[] createSObjectList(\t\tSObject sObj,\t\tInteger numberOfObjects,\t\tString defaultClassName,\t\tBoolean doInsert\t) Parameters sObj Type: \t\tSObject Type of sObjects to create numberOfObjects Integer number of objects to create defaultClassName String name of a class providing defaults doInsert         Boolean should this method insert the created object? Returns SObject[] createSObjectList(sObj, numberOfObjects, defaultClassName) Creates a list of sObjects Signature public static SObject[] createSObjectList(\t\tSObject sObj,\t\tInteger numberOfObjects,\t\tString defaultClassName\t) Parameters sObj Type: \t\tSObject Type of sObjects to create numberOfObjects Integer number of objects to create defaultClassName String name of a class providing defaults Returns SObject[] TestFactory.FieldDefaults Use the FieldDefaults interface to set up values you want to default in for all objects Signature public interface FieldDefaults TestFactory.FieldDefaults Methods .build() .build() .build() .build() .equals() .getRecord() .getRecord() .getRecord() .getRecord() .selectField() .selectField() .selectField() .selectField() .setScopeLimit() .setScopeLimit() .setScopeLimit() .setScopeLimit() .whereCondition(Query.Condition() .whereCondition(Query.Condition() .whereCondition(Query.Condition() .whereCondition(Query.Condition() assignPermSetToUser(user, permSetName) Assigns a permission set to a given user. createMarketingUser(doInsert) createMinAccessUser(doInsert) Creates a user with the Minimum Access Profile Relies on the previous method for creating the user. createPermissionSet(permSetName, doInsert) createTestUser(profileId, doInsert) creates a test user. Useful for permissions testing createTestUser(doInsert, profileName) Creates a test user with a given profile. createTestUser() createTestUser() enableCustomPermission(permissionName, forUserId) for() getFieldDefaults() Interface used by implementing classes to define defaults. if() if() invalidateSObjectList(incoming) Intentionally invalidates a list of sObjects. This is useful for intentionally causing DML errors during testing. obj.put() TestFactory.createTestUser() .build() Signature .build() .build() Signature .build() .build() Signature .build() .build() Signature .build() .equals() Signature .equals('Name', 'Minimum Access - Salesforce') .getRecord() Signature .getRecord() .getRecord() Signature .getRecord() .getRecord() Signature .getRecord() .getRecord() Signature .getRecord() .selectField() Signature .selectField('Id') .selectField() Signature .selectField('Id') .selectField() Signature .selectField('Id') .selectField() Signature .selectField('Id') .setScopeLimit() Signature .setScopeLimit(1) .setScopeLimit() Signature .setScopeLimit(1) .setScopeLimit() Signature .setScopeLimit(1) .setScopeLimit() Signature .setScopeLimit(1) .whereCondition(Query.Condition() Signature .whereCondition(new Query.Condition().equals('Name', profileName)) .whereCondition(Query.Condition() Signature .whereCondition(\t\t\t\tnew Query.Condition() .whereCondition(Query.Condition() Signature .whereCondition(new Query.Condition().equals('name', permSetName)) .whereCondition(Query.Condition() Signature .whereCondition(\t\t\t\tnew Query.Condition().equals('Name', 'Marketing User') assignPermSetToUser(user, permSetName) Assigns a permission set to a given user. Signature public static void assignPermSetToUser(User user, String permSetName) Parameters usr         User to assign the permission set to. permSetName Type: String String name of the permission set. createMarketingUser(doInsert) Signature public static User createMarketingUser(Boolean doInsert) createMinAccessUser(doInsert) Creates a user with the Minimum Access Profile Relies on the previous method for creating the user. Signature public static User createMinAccessUser(Boolean doInsert) Parameters doInsert Type: Boolean Should this code insert the user? Returns User createPermissionSet(permSetName, doInsert) Signature public static PermissionSet createPermissionSet(\t\tString permSetName,\t\tBoolean doInsert\t) createTestUser(profileId, doInsert) creates a test user. Useful for permissions testing Signature public static User createTestUser(Id profileId, boolean doInsert) Parameters profileId Type: Id Profile Id to use when creating a user. doInsert Type: boolean Boolean, should this code insert the user? Returns User createTestUser(doInsert, profileName) Creates a test user with a given profile. Signature public static User createTestUser(Boolean doInsert, String profileName) Parameters doInsert Type: Boolean Should this code insert the created user? profileName Type: String Name of the profile to create the user with. Returns User createTestUser() Signature return createTestUser(selectedProfile.Id, doInsert) createTestUser() Signature return createTestUser(profileId, doInsert) enableCustomPermission(permissionName, forUserId) Signature public static void enableCustomPermission(\t\tString permissionName,\t\tId forUserId\t) for() Signature for(sObject obj : incoming) getFieldDefaults() Interface used by implementing classes to define defaults. Signature Map<Schema.SObjectField, Object> getFieldDefaults() Returns Map<Schema.SObjectField, Object> if() Signature if(doInsert) if() Signature if(doInsert) invalidateSObjectList(incoming) Intentionally invalidates a list of sObjects. This is useful for intentionally causing DML errors during testing. Signature public static List<sObject> invalidateSObjectList(List<sObject> incoming) Parameters incoming Type: List<sObject> List of SObjects Returns List<sObject> obj.put() Signature obj.put('name', '') TestFactory.createTestUser() Signature return TestFactory.createTestUser(profileId, doInsert) TestFactory.TestFactoryException Internal custom exception class Signature public class TestFactoryException extends Exception"
    },
    {
        "title": "InvokeMetadataDrivenTriggerFramework",
        "fileName": "InvokeMetadataDrivenTriggerFramework.html",
        "text": "InvokeMetadataDrivenTriggerFramework Signature public with sharing class InvokeMetadataDrivenTriggerFramework InvokeMetadataDrivenTriggerFramework Methods invokeMetadataTriggerFramework(inputParams) invokeMetadataTriggerFramework(inputParams) Signature public static void invokeMetadataTriggerFramework(\t\tList<inputs> inputParams\t) InvokeMetadataDrivenTriggerFramework.inputs Signature public class inputs InvokeMetadataDrivenTriggerFramework.inputs Properties Name Signature context public TriggerOperation context triggerNew public List<SObject> triggerNew triggerOld public List<SObject> triggerOld"
    },
    {
        "title": "MetadataTriggerFramework",
        "fileName": "MetadataTriggerFramework.html",
        "text": "MetadataTriggerFramework Signature public with sharing class MetadataTriggerFramework extends TriggerFramework MetadataTriggerFramework Properties Name Signature Annotations activeHandler private TriggerFramework activeHandler @testVisible mts private MetadataTriggerQueryService mts @testVisible triggerNew protected List<sObject> triggerNew triggerOld protected List<sObject> triggerOld triggers private List<Metadata_Driven_Trigger__mdt> triggers @testVisible MetadataTriggerFramework Constructors MetadataTriggerFramework() Constructor used by live triggers. Because this constructor makes live-use of a metadata query service that will query live metatdata these two constructors are effectively un-testable without requiring you to insert custom metadata. MetadataTriggerFramework(triggerNew, triggerOld, context) MetadataTriggerFramework(mts) MetadataTriggerFramework() Constructor used by live triggers. Because this constructor makes live-use of a metadata query service that will query live metatdata these two constructors are effectively un-testable without requiring you to insert custom metadata. Signature public MetadataTriggerFramework() MetadataTriggerFramework(triggerNew, triggerOld, context) Signature public MetadataTriggerFramework(\t\tList<sObject> triggerNew,\t\tList<sObject> triggerOld,\t\tTriggerOperation context\t) MetadataTriggerFramework(mts) Signature public MetadataTriggerFramework(MetadataTriggerQueryService mts) MetadataTriggerFramework Methods dispatch(activeHandler) This loop is responsible for instantiating the trigger handler classes identified by the query above, and then calling the proper context methods. run() Overrides the standard Run() method, which allows this metadata based trigger handler can be an incremental update / sit beside other trigger handlers classes that are directly invoked by a trigger dispatch(activeHandler) This loop is responsible for instantiating the trigger handler classes identified by the query above, and then calling the proper context methods. Signature private void dispatch(TriggerFramework activeHandler) run() Overrides the standard Run() method, which allows this metadata based trigger handler can be an incremental update / sit beside other trigger handlers classes that are directly invoked by a trigger Signature @SuppressWarnings('PMD.ApexCRUDViolation') override public void run()"
    },
    {
        "title": "MetadataTriggerFrameworkException",
        "fileName": "MetadataTriggerFrameworkException.html",
        "text": "MetadataTriggerFrameworkException Signature public with sharing class MetadataTriggerFrameworkException extends Exception"
    },
    {
        "title": "MetadataTriggerFrameworkTests",
        "fileName": "MetadataTriggerFrameworkTests.html",
        "text": "MetadataTriggerFrameworkTests Signature @isTest private class MetadataTriggerFrameworkTests MetadataTriggerFrameworkTests Methods exerciseTriggerHandlerPositive(context) testExecutesAfterDeletePositive() testExecutesAfterInsertPositive() testExecutesAfterUndeletePositive() testExecutesAfterUpdatePositive() testExecutesBeforeDeletePositive() testExecutesBeforeInsertPositive() testExecutesBeforeUpdatePositive() testMetadataTriggerFrameworkNoOppWithoutRecordsPositive() exerciseTriggerHandlerPositive(context) Signature private static void exerciseTriggerHandlerPositive(String context) testExecutesAfterDeletePositive() Signature @isTest private static void testExecutesAfterDeletePositive() testExecutesAfterInsertPositive() Signature @isTest private static void testExecutesAfterInsertPositive() testExecutesAfterUndeletePositive() Signature @isTest private static void testExecutesAfterUndeletePositive() testExecutesAfterUpdatePositive() Signature @isTest private static void testExecutesAfterUpdatePositive() testExecutesBeforeDeletePositive() Signature @isTest private static void testExecutesBeforeDeletePositive() testExecutesBeforeInsertPositive() Signature @isTest private static void testExecutesBeforeInsertPositive() testExecutesBeforeUpdatePositive() Signature @isTest private static void testExecutesBeforeUpdatePositive() testMetadataTriggerFrameworkNoOppWithoutRecordsPositive() Signature @isTest private static void testMetadataTriggerFrameworkNoOppWithoutRecordsPositive()"
    },
    {
        "title": "MetadataTriggerQueryService",
        "fileName": "MetadataTriggerQueryService.html",
        "text": "MetadataTriggerQueryService Signature public with sharing class MetadataTriggerQueryService MetadataTriggerQueryService Properties Name Signature Description objType private String objType Initialize objectTypeName as an empty string to avoid null errors MetadataTriggerQueryService Constructors MetadataTriggerQueryService(objectTypeName) Constructor for trigger query service MetadataTriggerQueryService(objectTypeName) Constructor for trigger query service Signature public MetadataTriggerQueryService(String objectTypeName) Parameters objectTypeName Type: String MetadataTriggerQueryService Methods getMetadataTriggers() This query finds an ordered list trigger handler classes to execute. It ignores any classes that are marked as disabled. Note: It will exclude any triggerHandler metadata records for which the user's email address is found in a related disabled_for__mdt  record. Admins and Developers can selectively disable trigger handlers for all or selected individuals *without* deploying. getSObjectType(triggerNew, triggerOld) This determines the active sObject type by describing the first record in the trigger New / Old list getMetadataTriggers() This query finds an ordered list trigger handler classes to execute. It ignores any classes that are marked as disabled. Note: It will exclude any triggerHandler metadata records for which the user's email address is found in a related disabled_for__mdt  record. Admins and Developers can selectively disable trigger handlers for all or selected individuals *without* deploying. Signature @suppressWarnings('PMD.ApexCRUDViolation') public List<Metadata_Driven_Trigger__mdt> getMetadataTriggers() Returns List<Metadata_Driven_Trigger__mdt> getSObjectType(triggerNew, triggerOld) This determines the active sObject type by describing the first record in the trigger New / Old list Signature public static String getSObjectType(\t\tList<sObject> triggerNew,\t\tList<sObject> triggerOld\t) Parameters triggerNew Type: \t\tList<sObject> triggerOld Returns String Exceptions MetadataTriggerFrameworkException"
    },
    {
        "title": "MetadataTriggerQueryServiceTests",
        "fileName": "MetadataTriggerQueryServiceTests.html",
        "text": "MetadataTriggerQueryServiceTests Signature @isTest private class MetadataTriggerQueryServiceTests MetadataTriggerQueryServiceTests Methods testGetMetadataTriggers() testGetSObjectTypeNegative() testGetSObjectTypePositiveFromTriggerNew() testGetSObjectTypePositiveFromTriggerOld() testGetMetadataTriggers() Signature @isTest private static void testGetMetadataTriggers() testGetSObjectTypeNegative() Signature @isTest private static void testGetSObjectTypeNegative() testGetSObjectTypePositiveFromTriggerNew() Signature @isTest private static void testGetSObjectTypePositiveFromTriggerNew() testGetSObjectTypePositiveFromTriggerOld() Signature @isTest private static void testGetSObjectTypePositiveFromTriggerOld()"
    },
    {
        "title": "TriggerContext",
        "fileName": "TriggerContext.html",
        "text": "TriggerContext Signature public with sharing class TriggerContext TriggerContext Properties Name Signature context public TriggerOperation context isTriggerBeingTested public Boolean isTriggerBeingTested TriggerContext Constructors TriggerContext() TriggerContext() Signature public TriggerContext() TriggerContext Methods isInvalidExecutionContext() make sure this trigger should continue to run setContextDuringNormalExecution() This block is executed during normal operation. setManuallyOverriddenContext(overriddenContext) setTriggerContext(overriddenContext, overrideForTesting) Internal method for manually setting the trigger context isInvalidExecutionContext() make sure this trigger should continue to run Signature @testVisible public Boolean isInvalidExecutionContext() Returns Boolean Exceptions TriggerHandlerException thrown when executing outside of a trigger setContextDuringNormalExecution() This block is executed during normal operation. Signature private void setContextDuringNormalExecution() setManuallyOverriddenContext(overriddenContext) Signature private void setManuallyOverriddenContext(String overriddenContext) setTriggerContext(overriddenContext, overrideForTesting) Internal method for manually setting the trigger context Signature private void setTriggerContext(\t\tString overriddenContext,\t\tBoolean overrideForTesting\t) Parameters ctx      The current trigger Context testMode Is the trigger running in a test context?"
    },
    {
        "title": "TriggerFramework",
        "fileName": "TriggerFramework.html",
        "text": "TriggerFramework An opinionated trigger handler framework. Signature public virtual class TriggerFramework TriggerFramework Properties Name Signature Annotations bypassedHandlers public static Set<String> bypassedHandlers loopCountMap private static Map<String, TriggerFrameworkLoopCount> loopCountMap triggerContext protected TriggerContext triggerContext @testVisible TriggerFramework Methods addToLoopCount() private instance methods afterDelete() Virtual method for the implementing class to override afterInsert() Virtual method for the implementing class to override afterUndelete() Virtual method for the implementing class to override afterUpdate() Virtual method for the implementing class to override beforeDelete() Virtual method for the implementing class to override beforeInsert() context methods beforeUpdate() Virtual method for the implementing class to override bypass(handlerName) Allows developers to conditionally bypass(disable) other triggers that *also* implement this TriggerFramework clearAllBypasses() removes all classes from the bypass list clearBypass(handlerName) Removes a given trigger handler class name from the list of bypassed trigger handlers. clearMaxLoopCount() Allows developers to turn off the max loop count dispatchHandlerMethod(context) Guard statements against invalid execution context and a bypassed handlerName getHandlerName() Returns the string version of the handler class being invoked isBypassed(handlerName) Allows developers to check whether a given trigger handler class is currently bypassed. run() This is main brokering method that is called by the trigger. It's responsible for determining the proper context, and calling the correct method setMaxLoopCount(max) Allows developers to prevent trigger loops, or allow a limited number of them by setting the maximum number of times this trigger is called. standardValidationFails() addToLoopCount() private instance methods Signature @testVisible protected void addToLoopCount() afterDelete() Virtual method for the implementing class to override Signature @SuppressWarnings('PMD.EmptyStatementBlock') protected virtual void afterDelete() afterInsert() Virtual method for the implementing class to override Signature @SuppressWarnings('PMD.EmptyStatementBlock') protected virtual void afterInsert() afterUndelete() Virtual method for the implementing class to override Signature @SuppressWarnings('PMD.EmptyStatementBlock') protected virtual void afterUndelete() afterUpdate() Virtual method for the implementing class to override Signature @SuppressWarnings('PMD.EmptyStatementBlock') protected virtual void afterUpdate() beforeDelete() Virtual method for the implementing class to override Signature @SuppressWarnings('PMD.EmptyStatementBlock') protected virtual void beforeDelete() beforeInsert() context methods Signature @SuppressWarnings('PMD.EmptyStatementBlock') protected virtual void beforeInsert() beforeUpdate() Virtual method for the implementing class to override Signature @SuppressWarnings('PMD.EmptyStatementBlock') protected virtual void beforeUpdate() bypass(handlerName) Allows developers to conditionally bypass(disable) other triggers that *also* implement this TriggerFramework Signature public static void bypass(String handlerName) Parameters handlerName Type: String Class name(String) of the trigger handler to bypass Example TriggerFramework.bypass('AccountTriggerFramework'); clearAllBypasses() removes all classes from the bypass list Signature public static void clearAllBypasses() Example TriggerFramework.clearAllBypasses(); clearBypass(handlerName) Removes a given trigger handler class name from the list of bypassed trigger handlers. Signature public static void clearBypass(String handlerName) Parameters handlerName Type: String Handler class name to remove from the bypass list Example TriggerFramework.clearBypass('AccountTriggerFramework'); clearMaxLoopCount() Allows developers to turn off the max loop count Signature public void clearMaxLoopCount() Example In the context of a TriggerFramework class, this.clearMaxLoopCount(); dispatchHandlerMethod(context) Guard statements against invalid execution context and a bypassed handlerName Signature private void dispatchHandlerMethod(TriggerOperation context) getHandlerName() Returns the string version of the handler class being invoked Signature @testVisible protected String getHandlerName() Returns String  Name of the Handler isBypassed(handlerName) Allows developers to check whether a given trigger handler class is currently bypassed. Signature public static Boolean isBypassed(String handlerName) Parameters handlerName Type: String The name of the trigger handler class to check for Returns Boolean Example TriggerFramework.isBypassed('AccountTriggerFramework'); run() This is main brokering method that is called by the trigger. It's responsible for determining the proper context, and calling the correct method Signature public virtual void run() Example AccountTriggerFramework.run(); setMaxLoopCount(max) Allows developers to prevent trigger loops, or allow a limited number of them by setting the maximum number of times this trigger is called. Signature public void setMaxLoopCount(Integer max) Parameters max Type: Integer A valid number(generally 1) of times you'd like to allow the trigger to run. Example In the context of a TriggerFramework class, this.setMaxLoopCount(5); standardValidationFails() Signature protected Boolean standardValidationFails()"
    },
    {
        "title": "TriggerFrameworkException",
        "fileName": "TriggerFrameworkException.html",
        "text": "TriggerFrameworkException Signature public class TriggerFrameworkException extends Exception"
    },
    {
        "title": "TriggerFrameworkLoopCount",
        "fileName": "TriggerFrameworkLoopCount.html",
        "text": "TriggerFrameworkLoopCount inner class for managing the loop count per handler Signature public with sharing class TriggerFrameworkLoopCount TriggerFrameworkLoopCount Properties Name Signature count public Integer count max public Integer max TriggerFrameworkLoopCount Constructors TriggerFrameworkLoopCount() Loop counter method with default of 5. TriggerFrameworkLoopCount(max) Sets loop count based on the param. TriggerFrameworkLoopCount() Loop counter method with default of 5. Signature public TriggerFrameworkLoopCount() TriggerFrameworkLoopCount(max) Sets loop count based on the param. Signature public TriggerFrameworkLoopCount(Integer max) Parameters max Type: Integer Maximum number of loops to allow. TriggerFrameworkLoopCount Methods exceeded() Determines if this we're about to exceed the loop count. getCount() Returns the current loop count. getMax() Returns the max loop count. increment() Increment the internal counter returning the results of this.exceeded(). setMax(max) Sets the max loop size exceeded() Determines if this we're about to exceed the loop count. Signature public Boolean exceeded() Returns Boolean  true if less than 0 or more than max. getCount() Returns the current loop count. Signature public Integer getCount() Returns Integer  current loop count. getMax() Returns the max loop count. Signature public Integer getMax() Returns Integer  max loop count. increment() Increment the internal counter returning the results of this.exceeded(). Signature public Boolean increment() Returns Boolean  true if count will exceed max count or is less than 0. setMax(max) Sets the max loop size Signature public void setMax(Integer max) Parameters max Type: Integer The integer to set max to."
    },
    {
        "title": "SampleHandler",
        "fileName": "SampleHandler.html",
        "text": "SampleHandler This class is a sample trigger handler for use while testing the metadataTriggerHandler. Because custom metadata cannot be inserted, and because the MetadataTriggerHandler instantiates handler classes from custom metadata records, even when we stub/mock the metadata record retrieval we still need an actual class that it can instantiate. Note, this class is annotated with @isTest to prevent its use outside of tests, not because it contains tests. Signature public without sharing class SampleHandler extends TriggerFramework SampleHandler Methods afterDelete() afterInsert() afterUndelete() afterUpdate() beforeDelete() beforeInsert() beforeUpdate() afterDelete() Signature public override void afterDelete() afterInsert() Signature public override void afterInsert() afterUndelete() Signature public override void afterUndelete() afterUpdate() Signature public override void afterUpdate() beforeDelete() Signature public override void beforeDelete() beforeInsert() Signature public override void beforeInsert() beforeUpdate() Signature public override void beforeUpdate()"
    },
    {
        "title": "TriggerFrameworkTests",
        "fileName": "TriggerFrameworkTests.html",
        "text": "TriggerFrameworkTests Signature @testVisible private class TriggerFrameworkTests TriggerFrameworkTests Properties Name Signature handler private static TriggerFrameworkTests.TestHandler handler lastMethodCalled private static String lastMethodCalled TRIGGER_CONTEXT_ERROR private static final String TRIGGER_CONTEXT_ERROR TriggerFrameworkTests Methods afterDeleteMode() afterInsertMode() afterUndeleteMode() afterUpdateMode() beforeDeleteMode() beforeInsertMode() beforeUpdateMode() resetTest() testing utilities testAfterDelete() testAfterInsert() testAfterUndelete() testAfterUpdate() testBeforeDelete() testBeforeInsert() unit tests testBeforeUpdate() testBypassAPI() testGetHandlerName() testLoopCount() testLoopCountClass() testNonTriggerContext() testVirtualMethods() afterDeleteMode() Signature private static void afterDeleteMode() afterInsertMode() Signature private static void afterInsertMode() afterUndeleteMode() Signature private static void afterUndeleteMode() afterUpdateMode() Signature private static void afterUpdateMode() beforeDeleteMode() Signature private static void beforeDeleteMode() beforeInsertMode() Signature private static void beforeInsertMode() beforeUpdateMode() Signature private static void beforeUpdateMode() resetTest() testing utilities Signature private static void resetTest() testAfterDelete() Signature @isTest private static void testAfterDelete() testAfterInsert() Signature @isTest private static void testAfterInsert() testAfterUndelete() Signature @isTest private static void testAfterUndelete() testAfterUpdate() Signature @isTest private static void testAfterUpdate() testBeforeDelete() Signature @isTest private static void testBeforeDelete() testBeforeInsert() unit tests Signature @isTest private static void testBeforeInsert() testBeforeUpdate() Signature @isTest private static void testBeforeUpdate() testBypassAPI() Signature @isTest private static void testBypassAPI() testGetHandlerName() Signature @isTest private static void testGetHandlerName() testLoopCount() Signature @isTest private static void testLoopCount() testLoopCountClass() Signature @isTest private static void testLoopCountClass() testNonTriggerContext() Signature @isTest private static void testNonTriggerContext() testVirtualMethods() Signature @isTest private static void testVirtualMethods() TriggerFrameworkTests.TestHandler test implementation of the TriggerHandler Signature @testVisible private class TestHandler extends TriggerFramework TriggerFrameworkTests.TestHandler Methods afterDelete() afterInsert() afterUndelete() afterUpdate() beforeDelete() beforeInsert() beforeUpdate() afterDelete() Signature public override void afterDelete() afterInsert() Signature public override void afterInsert() afterUndelete() Signature public override void afterUndelete() afterUpdate() Signature public override void afterUpdate() beforeDelete() Signature public override void beforeDelete() beforeInsert() Signature public override void beforeInsert() beforeUpdate() Signature public override void beforeUpdate()"
    }
];
